/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import RoundType from './RoundType';
import RuleSet from './RuleSet';
import Strategy from './Strategy';
import Translation from './Translation';
import UpdateRewardRequest from './UpdateRewardRequest';

/**
 * The UpdateContestRequestAllOf model module.
 * @module model/UpdateContestRequestAllOf
 * @version 1.0.1
 */
class UpdateContestRequestAllOf {
    /**
     * Constructs a new <code>UpdateContestRequestAllOf</code>.
     * @alias module:model/UpdateContestRequestAllOf
     */
    constructor() { 
        
        UpdateContestRequestAllOf.initialize(this);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['competitionId'] = null;
        obj['number'] = null;
        obj['name'] = null;
        obj['description'] = null;
        obj['termsConditions'] = null;
        obj['round'] = null;
        obj['roundType'] = new RoundType().model();
        obj['groupStage'] = null;
        obj['groupStageLabel'] = null;
        obj['entrantsFromContest'] = [null];
        obj['maxNumberOfEntrants'] = null;
        obj['minNumberOfEntrants'] = null;
        obj['ruleSets'] = new RuleSet().model();
        obj['isPublic'] = null;
        obj['autoStart'] = null;
        obj['scheduledStartDate'] = null;
        obj['scheduledEndDate'] = null;
        obj['strategies'] = new Strategy().model();
        obj['constraints'] = [null];
        obj['metadata'] = [new Metadata().model()];
        obj['translations'] = [new Translation().model()];
        obj['rewards'] = [new UpdateRewardRequest().model()];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['competitionId'] = { "type": 'String', "system": false };
        obj["fields"]['number'] = { "type": 'Number', "system": false };
        obj["fields"]['name'] = { "type": 'String', "system": false };
        obj["fields"]['description'] = { "type": 'String', "system": false };
        obj["fields"]['termsConditions'] = { "type": 'String', "system": false };
        obj["fields"]['round'] = { "type": 'Number', "system": false };
        obj["fields"]['roundType'] = new RoundType().modelMap();
        obj["fields"]['groupStage'] = { "type": 'Number', "system": false };
        obj["fields"]['groupStageLabel'] = { "type": 'String', "system": false };
        obj["fields"]['entrantsFromContest'] = [{ "type": 'String', "system": false }];
        obj["fields"]['maxNumberOfEntrants'] = { "type": 'Number', "system": false };
        obj["fields"]['minNumberOfEntrants'] = { "type": 'Number', "system": false };
        obj["fields"]['ruleSets'] = new RuleSet().modelMap();
        obj["fields"]['isPublic'] = { "type": 'Boolean', "system": false };
        obj["fields"]['autoStart'] = { "type": 'Boolean', "system": false };
        obj["fields"]['scheduledStartDate'] = { "type": 'Date', "system": false };
        obj["fields"]['scheduledEndDate'] = { "type": 'Date', "system": false };
        obj["fields"]['strategies'] = new Strategy().modelMap();
        obj["fields"]['constraints'] = [{ "type": 'String', "system": false }];
        obj["fields"]['metadata'] = [new Metadata().modelMap()];
        obj["fields"]['translations'] = [new Translation().modelMap()];
        obj["fields"]['rewards'] = [new UpdateRewardRequest().modelMap()];

        

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateContestRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateContestRequestAllOf} obj Optional instance to populate.
     * @return {module:model/UpdateContestRequestAllOf} The populated <code>UpdateContestRequestAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateContestRequestAllOf();

            if (data.hasOwnProperty('competitionId')) {
                obj['competitionId'] = ApiClient.convertToType(data['competitionId'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsConditions')) {
                obj['termsConditions'] = ApiClient.convertToType(data['termsConditions'], 'String');
            }
            if (data.hasOwnProperty('round')) {
                obj['round'] = ApiClient.convertToType(data['round'], 'Number');
            }
            if (data.hasOwnProperty('roundType')) {
                obj['roundType'] = RoundType.constructFromObject(data['roundType']);
            }
            if (data.hasOwnProperty('groupStage')) {
                obj['groupStage'] = ApiClient.convertToType(data['groupStage'], 'Number');
            }
            if (data.hasOwnProperty('groupStageLabel')) {
                obj['groupStageLabel'] = ApiClient.convertToType(data['groupStageLabel'], 'String');
            }
            if (data.hasOwnProperty('entrantsFromContest')) {
                obj['entrantsFromContest'] = ApiClient.convertToType(data['entrantsFromContest'], ['String']);
            }
            if (data.hasOwnProperty('maxNumberOfEntrants')) {
                obj['maxNumberOfEntrants'] = ApiClient.convertToType(data['maxNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('minNumberOfEntrants')) {
                obj['minNumberOfEntrants'] = ApiClient.convertToType(data['minNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('ruleSets')) {
                obj['ruleSets'] = RuleSet.constructFromObject(data['ruleSets']);
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('autoStart')) {
                obj['autoStart'] = ApiClient.convertToType(data['autoStart'], 'Boolean');
            }
            if (data.hasOwnProperty('scheduledStartDate')) {
                obj['scheduledStartDate'] = ApiClient.convertToType(data['scheduledStartDate'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndDate')) {
                obj['scheduledEndDate'] = ApiClient.convertToType(data['scheduledEndDate'], 'Date');
            }
            if (data.hasOwnProperty('strategies')) {
                obj['strategies'] = Strategy.constructFromObject(data['strategies']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Translation]);
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], [UpdateRewardRequest]);
            }
        }
        return obj;
    }


}

/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */
UpdateContestRequestAllOf.prototype['competitionId'] = undefined;

/**
 * The row number for displaying the Contest in a table
 * @member {Number} number
 * @default 0
 */
UpdateContestRequestAllOf.prototype['number'] = 0;

/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */
UpdateContestRequestAllOf.prototype['name'] = undefined;

/**
 * A name for the Contest. Can be translated
 * @member {String} description
 */
UpdateContestRequestAllOf.prototype['description'] = undefined;

/**
 * A name for the Contest. Can be translated
 * @member {String} termsConditions
 */
UpdateContestRequestAllOf.prototype['termsConditions'] = undefined;

/**
 * To what round does the contest belong
 * @member {Number} round
 * @default 1
 */
UpdateContestRequestAllOf.prototype['round'] = 1;

/**
 * @member {module:model/RoundType} roundType
 */
UpdateContestRequestAllOf.prototype['roundType'] = undefined;

/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 * @default 1
 */
UpdateContestRequestAllOf.prototype['groupStage'] = 1;

/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */
UpdateContestRequestAllOf.prototype['groupStageLabel'] = undefined;

/**
 * A list of CompetitionLabs contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
 * @member {Array.<String>} entrantsFromContest
 */
UpdateContestRequestAllOf.prototype['entrantsFromContest'] = undefined;

/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
UpdateContestRequestAllOf.prototype['maxNumberOfEntrants'] = undefined;

/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
UpdateContestRequestAllOf.prototype['minNumberOfEntrants'] = undefined;

/**
 * @member {module:model/RuleSet} ruleSets
 */
UpdateContestRequestAllOf.prototype['ruleSets'] = undefined;

/**
 * Is the event publicly exposed depending on the event model
 * @member {Boolean} isPublic
 * @default true
 */
UpdateContestRequestAllOf.prototype['isPublic'] = true;

/**
 * Is the event publicly exposed depending on the event model
 * @member {Boolean} autoStart
 * @default true
 */
UpdateContestRequestAllOf.prototype['autoStart'] = true;

/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
UpdateContestRequestAllOf.prototype['scheduledStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
UpdateContestRequestAllOf.prototype['scheduledEndDate'] = undefined;

/**
 * @member {module:model/Strategy} strategies
 */
UpdateContestRequestAllOf.prototype['strategies'] = undefined;

/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
UpdateContestRequestAllOf.prototype['constraints'] = undefined;

/**
 * @member {Array.<module:model/Metadata>} metadata
 */
UpdateContestRequestAllOf.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Translation>} translations
 */
UpdateContestRequestAllOf.prototype['translations'] = undefined;

/**
 * @member {Array.<module:model/UpdateRewardRequest>} rewards
 */
UpdateContestRequestAllOf.prototype['rewards'] = undefined;






export default UpdateContestRequestAllOf;

