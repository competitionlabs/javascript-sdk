/**
 * CompetitionLabs Application Services
 * CompetitionLabs Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoundType from './RoundType';
import RuleSet from './RuleSet';
import Strategy from './Strategy';
import TranslationValue from './TranslationValue';
import UpdateRewardRequest from './UpdateRewardRequest';

/**
 * The UpdateContestRequestAllOf model module.
 * @module model/UpdateContestRequestAllOf
 * @version 1.0.0
 */
class UpdateContestRequestAllOf {
    /**
     * Constructs a new <code>UpdateContestRequestAllOf</code>.
     * @alias module:model/UpdateContestRequestAllOf
     * @param name {String} A name for the Contest. Can be translated
     * @param roundType {module:model/RoundType} 
     * @param minNumberOfEntrants {Number} Minimum number of entrants for the contest
     * @param ruleSets {Array.<module:model/RuleSet>} 
     * @param scheduledStartDate {Date} ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     * @param scheduledEndDate {Date} ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     * @param strategies {module:model/Strategy} 
     * @param constraints {Array.<String>} Additional constraints
     */
    constructor(name, roundType, minNumberOfEntrants, ruleSets, scheduledStartDate, scheduledEndDate, strategies, constraints) { 
        
        UpdateContestRequestAllOf.initialize(this, name, roundType, minNumberOfEntrants, ruleSets, scheduledStartDate, scheduledEndDate, strategies, constraints);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, roundType, minNumberOfEntrants, ruleSets, scheduledStartDate, scheduledEndDate, strategies, constraints) { 
        obj['name'] = name;
        obj['roundType'] = roundType;
        obj['minNumberOfEntrants'] = minNumberOfEntrants;
        obj['ruleSets'] = ruleSets;
        obj['scheduledStartDate'] = scheduledStartDate;
        obj['scheduledEndDate'] = scheduledEndDate;
        obj['strategies'] = strategies;
        obj['constraints'] = constraints;
    }

    /**
     * Constructs a <code>UpdateContestRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateContestRequestAllOf} obj Optional instance to populate.
     * @return {module:model/UpdateContestRequestAllOf} The populated <code>UpdateContestRequestAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateContestRequestAllOf();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('roundType')) {
                obj['roundType'] = RoundType.constructFromObject(data['roundType']);
            }
            if (data.hasOwnProperty('maxNumberOfEntrants')) {
                obj['maxNumberOfEntrants'] = ApiClient.convertToType(data['maxNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('minNumberOfEntrants')) {
                obj['minNumberOfEntrants'] = ApiClient.convertToType(data['minNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('ruleSets')) {
                obj['ruleSets'] = ApiClient.convertToType(data['ruleSets'], [RuleSet]);
            }
            if (data.hasOwnProperty('scheduledStartDate')) {
                obj['scheduledStartDate'] = ApiClient.convertToType(data['scheduledStartDate'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndDate')) {
                obj['scheduledEndDate'] = ApiClient.convertToType(data['scheduledEndDate'], 'Date');
            }
            if (data.hasOwnProperty('strategies')) {
                obj['strategies'] = Strategy.constructFromObject(data['strategies']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Object]);
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], [UpdateRewardRequest]);
            }
        }
        return obj;
    }


}

/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */
UpdateContestRequestAllOf.prototype['name'] = undefined;

/**
 * A name for the Contest. Can be translated
 * @member {String} description
 */
UpdateContestRequestAllOf.prototype['description'] = undefined;

/**
 * A name for the Contest. Can be translated
 * @member {String} termsAndConditions
 */
UpdateContestRequestAllOf.prototype['termsAndConditions'] = undefined;

/**
 * @member {module:model/RoundType} roundType
 */
UpdateContestRequestAllOf.prototype['roundType'] = undefined;

/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
UpdateContestRequestAllOf.prototype['maxNumberOfEntrants'] = undefined;

/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
UpdateContestRequestAllOf.prototype['minNumberOfEntrants'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} ruleSets
 */
UpdateContestRequestAllOf.prototype['ruleSets'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
UpdateContestRequestAllOf.prototype['scheduledStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
UpdateContestRequestAllOf.prototype['scheduledEndDate'] = undefined;

/**
 * @member {module:model/Strategy} strategies
 */
UpdateContestRequestAllOf.prototype['strategies'] = undefined;

/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
UpdateContestRequestAllOf.prototype['constraints'] = undefined;

/**
 * @member {Array.<Object.<String, module:model/TranslationValue>>} translations
 */
UpdateContestRequestAllOf.prototype['translations'] = undefined;

/**
 * @member {Array.<module:model/UpdateRewardRequest>} rewards
 */
UpdateContestRequestAllOf.prototype['rewards'] = undefined;






export default UpdateContestRequestAllOf;

