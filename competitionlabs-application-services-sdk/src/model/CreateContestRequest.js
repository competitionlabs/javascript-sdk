/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateRewardRequest from './CreateRewardRequest';
import Metadata from './Metadata';
import RoundType from './RoundType';
import RuleSet from './RuleSet';
import Strategy from './Strategy';
import Translation from './Translation';

/**
 * The CreateContestRequest model module.
 * @module model/CreateContestRequest
 * @version 1.0.4
 */
class CreateContestRequest {
    /**
     * Constructs a new <code>CreateContestRequest</code>.
     * @alias module:model/CreateContestRequest
     * @param name {String} A name for the Contest. Can be translated
     * @param roundType {module:model/RoundType} 
     * @param ruleSets {Array.<module:model/RuleSet>} 
     */
    constructor(name, roundType, ruleSets) { 
        
        CreateContestRequest.initialize(this, name, roundType, ruleSets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, roundType, ruleSets) { 
        obj['name'] = name;
        obj['roundType'] = roundType;
        obj['ruleSets'] = ruleSets;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['name'];
        obj['description'];
        obj['termsConditions'];
        obj['roundType'];
        obj['maxNumberOfEntrants'];
        obj['minNumberOfEntrants'];
        obj['ruleSets'];
        obj['scheduledStartDate'];
        obj['scheduledEndDate'];
        obj['strategies'];
        obj['constraints'];
        obj['metadata'];
        obj['translations'];
        obj['rewards'];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['name'];
        obj["fields"]['description'];
        obj["fields"]['termsConditions'];
        obj["fields"]['roundType'];
        obj["fields"]['maxNumberOfEntrants'];
        obj["fields"]['minNumberOfEntrants'];
        obj["fields"]['ruleSets'];
        obj["fields"]['scheduledStartDate'];
        obj["fields"]['scheduledEndDate'];
        obj["fields"]['strategies'];
        obj["fields"]['constraints'];
        obj["fields"]['metadata'];
        obj["fields"]['translations'];
        obj["fields"]['rewards'];

        
        obj["requiredFields"]['name'];
        obj["requiredFields"]['roundType'];
        obj["requiredFields"]['ruleSets'];

        return obj;
    }

    /**
     * Constructs a <code>CreateContestRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateContestRequest} obj Optional instance to populate.
     * @return {module:model/CreateContestRequest} The populated <code>CreateContestRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateContestRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsConditions')) {
                obj['termsConditions'] = ApiClient.convertToType(data['termsConditions'], 'String');
            }
            if (data.hasOwnProperty('roundType')) {
                obj['roundType'] = RoundType.constructFromObject(data['roundType']);
            }
            if (data.hasOwnProperty('maxNumberOfEntrants')) {
                obj['maxNumberOfEntrants'] = ApiClient.convertToType(data['maxNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('minNumberOfEntrants')) {
                obj['minNumberOfEntrants'] = ApiClient.convertToType(data['minNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('ruleSets')) {
                obj['ruleSets'] = ApiClient.convertToType(data['ruleSets'], [RuleSet]);
            }
            if (data.hasOwnProperty('scheduledStartDate')) {
                obj['scheduledStartDate'] = ApiClient.convertToType(data['scheduledStartDate'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndDate')) {
                obj['scheduledEndDate'] = ApiClient.convertToType(data['scheduledEndDate'], 'Date');
            }
            if (data.hasOwnProperty('strategies')) {
                obj['strategies'] = Strategy.constructFromObject(data['strategies']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Translation]);
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], [CreateRewardRequest]);
            }
        }
        return obj;
    }


}

/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */
CreateContestRequest.prototype['name'] = undefined;

/**
 * A name for the Contest. Can be translated
 * @member {String} description
 */
CreateContestRequest.prototype['description'] = undefined;

/**
 * A name for the Contest. Can be translated
 * @member {String} termsConditions
 */
CreateContestRequest.prototype['termsConditions'] = undefined;

/**
 * @member {module:model/RoundType} roundType
 */
CreateContestRequest.prototype['roundType'] = undefined;

/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
CreateContestRequest.prototype['maxNumberOfEntrants'] = undefined;

/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
CreateContestRequest.prototype['minNumberOfEntrants'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} ruleSets
 */
CreateContestRequest.prototype['ruleSets'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
CreateContestRequest.prototype['scheduledStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
CreateContestRequest.prototype['scheduledEndDate'] = undefined;

/**
 * @member {module:model/Strategy} strategies
 */
CreateContestRequest.prototype['strategies'] = undefined;

/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
CreateContestRequest.prototype['constraints'] = undefined;

/**
 * @member {Array.<module:model/Metadata>} metadata
 */
CreateContestRequest.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Translation>} translations
 */
CreateContestRequest.prototype['translations'] = undefined;

/**
 * @member {Array.<module:model/CreateRewardRequest>} rewards
 */
CreateContestRequest.prototype['rewards'] = undefined;






export default CreateContestRequest;

