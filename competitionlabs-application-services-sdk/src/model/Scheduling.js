/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScheduleType from './ScheduleType';

/**
 * The Scheduling model module.
 * @module model/Scheduling
 * @version 1.0.4
 */
class Scheduling {
    /**
     * Constructs a new <code>Scheduling</code>.
     * @alias module:model/Scheduling
     * @param scheduleType {module:model/ScheduleType} 
     * @param scheduleOccurrencesLimit {Number} A value indicating how many times it will be issued
     * @param every {Array.<Number>} 
     * @param startDate {Date} The start date and time of a schedule. ISO8601 timestamp
     */
    constructor(scheduleType, scheduleOccurrencesLimit, every, startDate) { 
        
        Scheduling.initialize(this, scheduleType, scheduleOccurrencesLimit, every, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scheduleType, scheduleOccurrencesLimit, every, startDate) { 
        obj['scheduleType'] = scheduleType;
        obj['scheduleOccurrencesLimit'] = scheduleOccurrencesLimit;
        obj['every'] = every;
        obj['startDate'] = startDate;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['scheduleType'];
        obj['scheduleOccurrencesLimit'];
        obj['every'];
        obj['startDate'];
        obj['endDate'];
        obj['onlyAggregateOnActiveDays'];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['scheduleType'];
        obj["fields"]['scheduleOccurrencesLimit'];
        obj["fields"]['every'];
        obj["fields"]['startDate'];
        obj["fields"]['endDate'];
        obj["fields"]['onlyAggregateOnActiveDays'];

        
        obj["requiredFields"]['scheduleType'];
        obj["requiredFields"]['scheduleOccurrencesLimit'];
        obj["requiredFields"]['every'];
        obj["requiredFields"]['startDate'];

        return obj;
    }

    /**
     * Constructs a <code>Scheduling</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scheduling} obj Optional instance to populate.
     * @return {module:model/Scheduling} The populated <code>Scheduling</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scheduling();

            if (data.hasOwnProperty('scheduleType')) {
                obj['scheduleType'] = ScheduleType.constructFromObject(data['scheduleType']);
            }
            if (data.hasOwnProperty('scheduleOccurrencesLimit')) {
                obj['scheduleOccurrencesLimit'] = ApiClient.convertToType(data['scheduleOccurrencesLimit'], 'Number');
            }
            if (data.hasOwnProperty('every')) {
                obj['every'] = ApiClient.convertToType(data['every'], ['Number']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('onlyAggregateOnActiveDays')) {
                obj['onlyAggregateOnActiveDays'] = ApiClient.convertToType(data['onlyAggregateOnActiveDays'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ScheduleType} scheduleType
 */
Scheduling.prototype['scheduleType'] = undefined;

/**
 * A value indicating how many times it will be issued
 * @member {Number} scheduleOccurrencesLimit
 */
Scheduling.prototype['scheduleOccurrencesLimit'] = undefined;

/**
 * @member {Array.<Number>} every
 */
Scheduling.prototype['every'] = undefined;

/**
 * The start date and time of a schedule. ISO8601 timestamp
 * @member {Date} startDate
 */
Scheduling.prototype['startDate'] = undefined;

/**
 * The end date and time of a schedule. ISO8601 timestamp
 * @member {Date} endDate
 */
Scheduling.prototype['endDate'] = undefined;

/**
 * @member {Boolean} onlyAggregateOnActiveDays
 */
Scheduling.prototype['onlyAggregateOnActiveDays'] = undefined;






export default Scheduling;

