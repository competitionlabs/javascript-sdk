/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityType from './EntityType';
import MemberAwardAllOf from './MemberAwardAllOf';
import ModelDefault from './ModelDefault';

/**
 * The MemberAward model module.
 * @module model/MemberAward
 * @version 1.0.5
 */
class MemberAward {
    /**
     * Constructs a new <code>MemberAward</code>.
     * @alias module:model/MemberAward
     * @implements module:model/ModelDefault
     * @implements module:model/MemberAwardAllOf
     * @param id {String} A unique system generated identifier
     * @param spaceName {String} This is the space name which is linked to the account
     * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     * @param rewardId {String} A unique identifier of a Reward
     * @param rewardTypeKey {String} The type of the Reward
     * @param rewardTypeId {String} A unique id of the Reward Type
     * @param rewardValue {Number} Numerical value of the reward that will be issued based on the reward type
     * @param claimed {Boolean} has the award been claimed or not
     * @param entityType {module:model/EntityType} 
     * @param entityId {String} The Id of the contest or achievement related to this Award. Dependant on entityType
     */
    constructor(id, spaceName, created, rewardId, rewardTypeKey, rewardTypeId, rewardValue, claimed, entityType, entityId) { 
        ModelDefault.initialize(this, id, spaceName, created);MemberAwardAllOf.initialize(this, rewardId, rewardTypeKey, rewardTypeId, rewardValue, claimed, entityType, entityId);
        MemberAward.initialize(this, id, spaceName, created, rewardId, rewardTypeKey, rewardTypeId, rewardValue, claimed, entityType, entityId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, spaceName, created, rewardId, rewardTypeKey, rewardTypeId, rewardValue, claimed, entityType, entityId) { 
        obj['id'] = id;
        obj['spaceName'] = spaceName;
        obj['created'] = created;
        obj['rewardId'] = rewardId;
        obj['rewardTypeKey'] = rewardTypeKey;
        obj['rewardTypeId'] = rewardTypeId;
        obj['rewardValue'] = rewardValue;
        obj['claimed'] = claimed;
        obj['entityType'] = entityType;
        obj['entityId'] = entityId;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['id'] = null;
        obj['spaceName'] = null;
        obj['created'] = null;
        obj['rewardId'] = null;
        obj['rewardTypeKey'] = null;
        obj['rewardTypeId'] = null;
        obj['rewardValue'] = null;
        obj['memberAcknowledgmentRequired'] = null;
        obj['claimed'] = null;
        obj['delay'] = null;
        obj['entityType'] = new EntityType().model();
        obj['entityId'] = null;
        obj['pointInTime'] = null;
        obj['period'] = null;

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['id'] = { "type": 'String', "system": true };
        obj["fields"]['spaceName'] = { "type": 'String', "system": true };
        obj["fields"]['created'] = { "type": 'Date', "system": true };
        obj["fields"]['rewardId'] = { "type": 'String', "system": false };
        obj["fields"]['rewardTypeKey'] = { "type": 'String', "system": false };
        obj["fields"]['rewardTypeId'] = { "type": 'String', "system": false };
        obj["fields"]['rewardValue'] = { "type": 'Number', "system": false };
        obj["fields"]['memberAcknowledgmentRequired'] = { "type": 'Boolean', "system": false };
        obj["fields"]['claimed'] = { "type": 'Boolean', "system": false };
        obj["fields"]['delay'] = { "type": 'Number', "system": false };
        obj["fields"]['entityType'] = new EntityType().modelMap();
        obj["fields"]['entityId'] = { "type": 'String', "system": false };
        obj["fields"]['pointInTime'] = { "type": 'Date', "system": false };
        obj["fields"]['period'] = { "type": 'Number', "system": false };

        
        obj["requiredFields"]['id'] = { "type": 'String', "system": true };
        obj["requiredFields"]['spaceName'] = { "type": 'String', "system": true };
        obj["requiredFields"]['created'] = { "type": 'Date', "system": true };
        obj["requiredFields"]['rewardId'] = { "type": 'String', "system": false };
        obj["requiredFields"]['rewardTypeKey'] = { "type": 'String', "system": false };
        obj["requiredFields"]['rewardTypeId'] = { "type": 'String', "system": false };
        obj["requiredFields"]['rewardValue'] = { "type": 'Number', "system": false };
        obj["requiredFields"]['claimed'] = { "type": 'Boolean', "system": false };
        obj["requiredFields"]['entityType'] = new EntityType().modelMap();
        obj["requiredFields"]['entityId'] = { "type": 'String', "system": false };

        return obj;
    }

    /**
     * Constructs a <code>MemberAward</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberAward} obj Optional instance to populate.
     * @return {module:model/MemberAward} The populated <code>MemberAward</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberAward();
            ModelDefault.constructFromObject(data, obj);
            MemberAwardAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('rewardId')) {
                obj['rewardId'] = ApiClient.convertToType(data['rewardId'], 'String');
            }
            if (data.hasOwnProperty('rewardTypeKey')) {
                obj['rewardTypeKey'] = ApiClient.convertToType(data['rewardTypeKey'], 'String');
            }
            if (data.hasOwnProperty('rewardTypeId')) {
                obj['rewardTypeId'] = ApiClient.convertToType(data['rewardTypeId'], 'String');
            }
            if (data.hasOwnProperty('rewardValue')) {
                obj['rewardValue'] = ApiClient.convertToType(data['rewardValue'], 'Number');
            }
            if (data.hasOwnProperty('memberAcknowledgmentRequired')) {
                obj['memberAcknowledgmentRequired'] = ApiClient.convertToType(data['memberAcknowledgmentRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('claimed')) {
                obj['claimed'] = ApiClient.convertToType(data['claimed'], 'Boolean');
            }
            if (data.hasOwnProperty('delay')) {
                obj['delay'] = ApiClient.convertToType(data['delay'], 'Number');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = EntityType.constructFromObject(data['entityType']);
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('pointInTime')) {
                obj['pointInTime'] = ApiClient.convertToType(data['pointInTime'], 'Date');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * A unique system generated identifier
 * @member {String} id
 */
MemberAward.prototype['id'] = undefined;

/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
MemberAward.prototype['spaceName'] = undefined;

/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
MemberAward.prototype['created'] = undefined;

/**
 * A unique identifier of a Reward
 * @member {String} rewardId
 */
MemberAward.prototype['rewardId'] = undefined;

/**
 * The type of the Reward
 * @member {String} rewardTypeKey
 */
MemberAward.prototype['rewardTypeKey'] = undefined;

/**
 * A unique id of the Reward Type
 * @member {String} rewardTypeId
 */
MemberAward.prototype['rewardTypeId'] = undefined;

/**
 * Numerical value of the reward that will be issued based on the reward type
 * @member {Number} rewardValue
 */
MemberAward.prototype['rewardValue'] = undefined;

/**
 * Requires member acknowledgment to claim a reward. If set to True reward will not be automatically issued
 * @member {Boolean} memberAcknowledgmentRequired
 */
MemberAward.prototype['memberAcknowledgmentRequired'] = undefined;

/**
 * has the award been claimed or not
 * @member {Boolean} claimed
 */
MemberAward.prototype['claimed'] = undefined;

/**
 * Delay of issuing a reward in minutes
 * @member {Number} delay
 */
MemberAward.prototype['delay'] = undefined;

/**
 * @member {module:model/EntityType} entityType
 */
MemberAward.prototype['entityType'] = undefined;

/**
 * The Id of the contest or achievement related to this Award. Dependant on entityType
 * @member {String} entityId
 */
MemberAward.prototype['entityId'] = undefined;

/**
 * ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Date} pointInTime
 */
MemberAward.prototype['pointInTime'] = undefined;

/**
 * Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Number} period
 */
MemberAward.prototype['period'] = undefined;


// Implement ModelDefault interface:
/**
 * A unique system generated identifier
 * @member {String} id
 */
ModelDefault.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
ModelDefault.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
ModelDefault.prototype['created'] = undefined;
// Implement MemberAwardAllOf interface:
/**
 * A unique identifier of a Reward
 * @member {String} rewardId
 */
MemberAwardAllOf.prototype['rewardId'] = undefined;
/**
 * The type of the Reward
 * @member {String} rewardTypeKey
 */
MemberAwardAllOf.prototype['rewardTypeKey'] = undefined;
/**
 * A unique id of the Reward Type
 * @member {String} rewardTypeId
 */
MemberAwardAllOf.prototype['rewardTypeId'] = undefined;
/**
 * Numerical value of the reward that will be issued based on the reward type
 * @member {Number} rewardValue
 */
MemberAwardAllOf.prototype['rewardValue'] = undefined;
/**
 * Requires member acknowledgment to claim a reward. If set to True reward will not be automatically issued
 * @member {Boolean} memberAcknowledgmentRequired
 */
MemberAwardAllOf.prototype['memberAcknowledgmentRequired'] = undefined;
/**
 * has the award been claimed or not
 * @member {Boolean} claimed
 */
MemberAwardAllOf.prototype['claimed'] = undefined;
/**
 * Delay of issuing a reward in minutes
 * @member {Number} delay
 */
MemberAwardAllOf.prototype['delay'] = undefined;
/**
 * @member {module:model/EntityType} entityType
 */
MemberAwardAllOf.prototype['entityType'] = undefined;
/**
 * The Id of the contest or achievement related to this Award. Dependant on entityType
 * @member {String} entityId
 */
MemberAwardAllOf.prototype['entityId'] = undefined;
/**
 * ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Date} pointInTime
 */
MemberAwardAllOf.prototype['pointInTime'] = undefined;
/**
 * Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \"pointInTime\" or \"period\"
 * @member {Number} period
 */
MemberAwardAllOf.prototype['period'] = undefined;




export default MemberAward;

