/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventMetadata from './EventMetadata';

/**
 * The EventAllOf model module.
 * @module model/EventAllOf
 * @version 1.0.5
 */
class EventAllOf {
    /**
     * Constructs a new <code>EventAllOf</code>.
     * @alias module:model/EventAllOf
     * @param memberId {String} Unique system identifier of a Member
     * @param memberRefId {String} The reference to this member in external system
     * @param action {String} The identifier that describes the meaning of this event
     * @param entityId {String} It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
     * @param entityRefId {String} It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
     * @param sourceValue {Number} The actual numerical value related to the event
     * @param points {Number} A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
     * @param transactionTimestamp {Date} ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
     */
    constructor(memberId, memberRefId, action, entityId, entityRefId, sourceValue, points, transactionTimestamp) { 
        
        EventAllOf.initialize(this, memberId, memberRefId, action, entityId, entityRefId, sourceValue, points, transactionTimestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, memberId, memberRefId, action, entityId, entityRefId, sourceValue, points, transactionTimestamp) { 
        obj['memberId'] = memberId;
        obj['memberRefId'] = memberRefId;
        obj['action'] = action;
        obj['entityId'] = entityId;
        obj['entityRefId'] = entityRefId;
        obj['sourceValue'] = sourceValue;
        obj['points'] = points;
        obj['transactionTimestamp'] = transactionTimestamp;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['memberId'] = null;
        obj['memberRefId'] = null;
        obj['action'] = null;
        obj['batchId'] = null;
        obj['entityId'] = null;
        obj['entityRefId'] = null;
        obj['sourceValue'] = null;
        obj['points'] = null;
        obj['transactionTimestamp'] = null;
        obj['metadata'] = [new EventMetadata().model()];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['memberId'] = { "type": 'String', "system": false };
        obj["fields"]['memberRefId'] = { "type": 'String', "system": false };
        obj["fields"]['action'] = { "type": 'String', "system": false };
        obj["fields"]['batchId'] = { "type": 'String', "system": false };
        obj["fields"]['entityId'] = { "type": 'String', "system": false };
        obj["fields"]['entityRefId'] = { "type": 'String', "system": false };
        obj["fields"]['sourceValue'] = { "type": 'Number', "system": false };
        obj["fields"]['points'] = { "type": 'Number', "system": false };
        obj["fields"]['transactionTimestamp'] = { "type": 'Date', "system": false };
        obj["fields"]['metadata'] = [new EventMetadata().modelMap()];

        
        obj["requiredFields"]['memberId'] = { "type": 'String', "system": false };
        obj["requiredFields"]['memberRefId'] = { "type": 'String', "system": false };
        obj["requiredFields"]['action'] = { "type": 'String', "system": false };
        obj["requiredFields"]['entityId'] = { "type": 'String', "system": false };
        obj["requiredFields"]['entityRefId'] = { "type": 'String', "system": false };
        obj["requiredFields"]['sourceValue'] = { "type": 'Number', "system": false };
        obj["requiredFields"]['points'] = { "type": 'Number', "system": false };
        obj["requiredFields"]['transactionTimestamp'] = { "type": 'Date', "system": false };

        return obj;
    }

    /**
     * Constructs a <code>EventAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventAllOf} obj Optional instance to populate.
     * @return {module:model/EventAllOf} The populated <code>EventAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventAllOf();

            if (data.hasOwnProperty('memberId')) {
                obj['memberId'] = ApiClient.convertToType(data['memberId'], 'String');
            }
            if (data.hasOwnProperty('memberRefId')) {
                obj['memberRefId'] = ApiClient.convertToType(data['memberRefId'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('entityRefId')) {
                obj['entityRefId'] = ApiClient.convertToType(data['entityRefId'], 'String');
            }
            if (data.hasOwnProperty('sourceValue')) {
                obj['sourceValue'] = ApiClient.convertToType(data['sourceValue'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Number');
            }
            if (data.hasOwnProperty('transactionTimestamp')) {
                obj['transactionTimestamp'] = ApiClient.convertToType(data['transactionTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [EventMetadata]);
            }
        }
        return obj;
    }


}

/**
 * Unique system identifier of a Member
 * @member {String} memberId
 */
EventAllOf.prototype['memberId'] = undefined;

/**
 * The reference to this member in external system
 * @member {String} memberRefId
 */
EventAllOf.prototype['memberRefId'] = undefined;

/**
 * The identifier that describes the meaning of this event
 * @member {String} action
 */
EventAllOf.prototype['action'] = undefined;

/**
 * The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event
 * @member {String} batchId
 */
EventAllOf.prototype['batchId'] = undefined;

/**
 * It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
 * @member {String} entityId
 */
EventAllOf.prototype['entityId'] = undefined;

/**
 * It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
 * @member {String} entityRefId
 */
EventAllOf.prototype['entityRefId'] = undefined;

/**
 * The actual numerical value related to the event
 * @member {Number} sourceValue
 */
EventAllOf.prototype['sourceValue'] = undefined;

/**
 * A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
 * @member {Number} points
 */
EventAllOf.prototype['points'] = undefined;

/**
 * ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
 * @member {Date} transactionTimestamp
 */
EventAllOf.prototype['transactionTimestamp'] = undefined;

/**
 * @member {Array.<module:model/EventMetadata>} metadata
 */
EventAllOf.prototype['metadata'] = undefined;






export default EventAllOf;

