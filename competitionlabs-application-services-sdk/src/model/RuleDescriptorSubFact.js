/**
 * CompetitionLabs Admin Services
 * CompetitionLabs Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactDefault from './FactDefault';
import Macro from './Macro';
import RuleDescriptorSubFactAllOf from './RuleDescriptorSubFactAllOf';

/**
 * The RuleDescriptorSubFact model module.
 * @module model/RuleDescriptorSubFact
 * @version 3.0.1
 */
class RuleDescriptorSubFact {
    /**
     * Constructs a new <code>RuleDescriptorSubFact</code>.
     * @alias module:model/RuleDescriptorSubFact
     * @implements module:model/FactDefault
     * @implements module:model/RuleDescriptorSubFactAllOf
     * @param operators {Array.<String>} The operators supported by the fact
     * @param constantType {String} The data type of the constant
     * @param constantExample {String} Example of the constant
     * @param subFact {String} The sub fact available to be used with the fact
     */
    constructor(operators, constantType, constantExample, subFact) { 
        FactDefault.initialize(this, operators, constantType, constantExample);RuleDescriptorSubFactAllOf.initialize(this, subFact);
        RuleDescriptorSubFact.initialize(this, operators, constantType, constantExample, subFact);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operators, constantType, constantExample, subFact) { 
        obj['operators'] = operators;
        obj['constantType'] = constantType;
        obj['constantExample'] = constantExample;
        obj['subFact'] = subFact;
    }

    /**
     * Constructs a <code>RuleDescriptorSubFact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleDescriptorSubFact} obj Optional instance to populate.
     * @return {module:model/RuleDescriptorSubFact} The populated <code>RuleDescriptorSubFact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleDescriptorSubFact();
            FactDefault.constructFromObject(data, obj);
            RuleDescriptorSubFactAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('operators')) {
                obj['operators'] = ApiClient.convertToType(data['operators'], ['String']);
            }
            if (data.hasOwnProperty('constantType')) {
                obj['constantType'] = ApiClient.convertToType(data['constantType'], 'String');
            }
            if (data.hasOwnProperty('constantExample')) {
                obj['constantExample'] = ApiClient.convertToType(data['constantExample'], 'String');
            }
            if (data.hasOwnProperty('defaultVale')) {
                obj['defaultVale'] = ApiClient.convertToType(data['defaultVale'], 'String');
            }
            if (data.hasOwnProperty('macros')) {
                obj['macros'] = ApiClient.convertToType(data['macros'], [Macro]);
            }
            if (data.hasOwnProperty('subFact')) {
                obj['subFact'] = ApiClient.convertToType(data['subFact'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The operators supported by the fact
 * @member {Array.<String>} operators
 */
RuleDescriptorSubFact.prototype['operators'] = undefined;

/**
 * The data type of the constant
 * @member {String} constantType
 */
RuleDescriptorSubFact.prototype['constantType'] = undefined;

/**
 * Example of the constant
 * @member {String} constantExample
 */
RuleDescriptorSubFact.prototype['constantExample'] = undefined;

/**
 * The default value of the constant for the fact
 * @member {String} defaultVale
 */
RuleDescriptorSubFact.prototype['defaultVale'] = undefined;

/**
 * @member {Array.<module:model/Macro>} macros
 */
RuleDescriptorSubFact.prototype['macros'] = undefined;

/**
 * The sub fact available to be used with the fact
 * @member {String} subFact
 */
RuleDescriptorSubFact.prototype['subFact'] = undefined;


// Implement FactDefault interface:
/**
 * The operators supported by the fact
 * @member {Array.<String>} operators
 */
FactDefault.prototype['operators'] = undefined;
/**
 * The data type of the constant
 * @member {String} constantType
 */
FactDefault.prototype['constantType'] = undefined;
/**
 * Example of the constant
 * @member {String} constantExample
 */
FactDefault.prototype['constantExample'] = undefined;
/**
 * The default value of the constant for the fact
 * @member {String} defaultVale
 */
FactDefault.prototype['defaultVale'] = undefined;
/**
 * @member {Array.<module:model/Macro>} macros
 */
FactDefault.prototype['macros'] = undefined;
// Implement RuleDescriptorSubFactAllOf interface:
/**
 * The sub fact available to be used with the fact
 * @member {String} subFact
 */
RuleDescriptorSubFactAllOf.prototype['subFact'] = undefined;




export default RuleDescriptorSubFact;

