/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RankingStrategy from './RankingStrategy';
import ScoringStrategy from './ScoringStrategy';
import StrategyType from './StrategyType';

/**
 * The Strategy model module.
 * @module model/Strategy
 * @version 1.0.5
 */
class Strategy {
    /**
     * Constructs a new <code>Strategy</code>.
     * @alias module:model/Strategy
     * @param strategyType {module:model/StrategyType} 
     * @param rankingStrategy {module:model/RankingStrategy} 
     * @param scoringStrategy {module:model/ScoringStrategy} 
     */
    constructor(strategyType, rankingStrategy, scoringStrategy) { 
        
        Strategy.initialize(this, strategyType, rankingStrategy, scoringStrategy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, strategyType, rankingStrategy, scoringStrategy) { 
        obj['strategyType'] = strategyType;
        obj['rankingStrategy'] = rankingStrategy;
        obj['scoringStrategy'] = scoringStrategy;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['strategyType'] = new StrategyType().model();
        obj['rankingStrategy'] = new RankingStrategy().model();
        obj['scoringStrategy'] = new ScoringStrategy().model();

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['strategyType'] = new StrategyType().modelMap();
        obj["fields"]['rankingStrategy'] = new RankingStrategy().modelMap();
        obj["fields"]['scoringStrategy'] = new ScoringStrategy().modelMap();

        
        obj["requiredFields"]['strategyType'] = new StrategyType().modelMap();
        obj["requiredFields"]['rankingStrategy'] = new RankingStrategy().modelMap();
        obj["requiredFields"]['scoringStrategy'] = new ScoringStrategy().modelMap();

        return obj;
    }

    /**
     * Constructs a <code>Strategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Strategy} obj Optional instance to populate.
     * @return {module:model/Strategy} The populated <code>Strategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Strategy();

            if (data.hasOwnProperty('strategyType')) {
                obj['strategyType'] = StrategyType.constructFromObject(data['strategyType']);
            }
            if (data.hasOwnProperty('rankingStrategy')) {
                obj['rankingStrategy'] = RankingStrategy.constructFromObject(data['rankingStrategy']);
            }
            if (data.hasOwnProperty('scoringStrategy')) {
                obj['scoringStrategy'] = ScoringStrategy.constructFromObject(data['scoringStrategy']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/StrategyType} strategyType
 */
Strategy.prototype['strategyType'] = undefined;

/**
 * @member {module:model/RankingStrategy} rankingStrategy
 */
Strategy.prototype['rankingStrategy'] = undefined;

/**
 * @member {module:model/ScoringStrategy} scoringStrategy
 */
Strategy.prototype['scoringStrategy'] = undefined;






export default Strategy;

