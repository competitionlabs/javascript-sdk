/**
 * CompetitionLabs Application Services
 * CompetitionLabs Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AchievementLiveStatus from './AchievementLiveStatus';
import DependantOn from './DependantOn';
import RewardReduced from './RewardReduced';
import RuleSet from './RuleSet';
import Scheduling from './Scheduling';
import TagsReduced from './TagsReduced';
import TranslationValue from './TranslationValue';

/**
 * The AchievementAllOf model module.
 * @module model/AchievementAllOf
 * @version 1.0.0
 */
class AchievementAllOf {
    /**
     * Constructs a new <code>AchievementAllOf</code>.
     * @alias module:model/AchievementAllOf
     * @param name {String} A name for the Achievement. Can be translated
     * @param icon {String} An Icon id that has been pre uploaded to the system to display for Achievement
     * @param ruleSets {Array.<module:model/RuleSet>} 
     * @param scheduling {module:model/Scheduling} 
     * @param achievementLiveStatus {module:model/AchievementLiveStatus} 
     * @param memberGroups {Array.<module:model/TagsReduced>} A group of members that can receive the achievement
     * @param constraints {Array.<String>} Additional constraints, if set means true
     */
    constructor(name, icon, ruleSets, scheduling, achievementLiveStatus, memberGroups, constraints) { 
        
        AchievementAllOf.initialize(this, name, icon, ruleSets, scheduling, achievementLiveStatus, memberGroups, constraints);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, icon, ruleSets, scheduling, achievementLiveStatus, memberGroups, constraints) { 
        obj['name'] = name;
        obj['icon'] = icon;
        obj['ruleSets'] = ruleSets;
        obj['scheduling'] = scheduling;
        obj['achievementLiveStatus'] = achievementLiveStatus;
        obj['memberGroups'] = memberGroups;
        obj['constraints'] = constraints;
    }

    /**
     * Constructs a <code>AchievementAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AchievementAllOf} obj Optional instance to populate.
     * @return {module:model/AchievementAllOf} The populated <code>AchievementAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AchievementAllOf();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('ruleSets')) {
                obj['ruleSets'] = ApiClient.convertToType(data['ruleSets'], [RuleSet]);
            }
            if (data.hasOwnProperty('dependantOn')) {
                obj['dependantOn'] = DependantOn.constructFromObject(data['dependantOn']);
            }
            if (data.hasOwnProperty('scheduling')) {
                obj['scheduling'] = Scheduling.constructFromObject(data['scheduling']);
            }
            if (data.hasOwnProperty('achievementLiveStatus')) {
                obj['achievementLiveStatus'] = AchievementLiveStatus.constructFromObject(data['achievementLiveStatus']);
            }
            if (data.hasOwnProperty('memberGroups')) {
                obj['memberGroups'] = ApiClient.convertToType(data['memberGroups'], [TagsReduced]);
            }
            if (data.hasOwnProperty('maxNumberOfissues')) {
                obj['maxNumberOfissues'] = ApiClient.convertToType(data['maxNumberOfissues'], 'Number');
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Object]);
            }
            if (data.hasOwnProperty('translatableFields')) {
                obj['translatableFields'] = ApiClient.convertToType(data['translatableFields'], ['String']);
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], [RewardReduced]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * A name for the Achievement. Can be translated
 * @member {String} name
 */
AchievementAllOf.prototype['name'] = undefined;

/**
 * A name for the Achievement. Can be translated
 * @member {String} description
 */
AchievementAllOf.prototype['description'] = undefined;

/**
 * Terms and conditions of an achievement. Can be translated
 * @member {String} termsAndConditions
 */
AchievementAllOf.prototype['termsAndConditions'] = undefined;

/**
 * An Icon id that has been pre uploaded to the system to display for Achievement
 * @member {String} icon
 */
AchievementAllOf.prototype['icon'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} ruleSets
 */
AchievementAllOf.prototype['ruleSets'] = undefined;

/**
 * @member {module:model/DependantOn} dependantOn
 */
AchievementAllOf.prototype['dependantOn'] = undefined;

/**
 * @member {module:model/Scheduling} scheduling
 */
AchievementAllOf.prototype['scheduling'] = undefined;

/**
 * @member {module:model/AchievementLiveStatus} achievementLiveStatus
 */
AchievementAllOf.prototype['achievementLiveStatus'] = undefined;

/**
 * A group of members that can receive the achievement
 * @member {Array.<module:model/TagsReduced>} memberGroups
 */
AchievementAllOf.prototype['memberGroups'] = undefined;

/**
 * Maximum number of issued achievements
 * @member {Number} maxNumberOfissues
 */
AchievementAllOf.prototype['maxNumberOfissues'] = undefined;

/**
 * @member {Array.<Object.<String, module:model/TranslationValue>>} translations
 */
AchievementAllOf.prototype['translations'] = undefined;

/**
 * Achievements translatable fields
 * @member {Array.<String>} translatableFields
 */
AchievementAllOf.prototype['translatableFields'] = undefined;

/**
 * @member {Array.<module:model/RewardReduced>} rewards
 */
AchievementAllOf.prototype['rewards'] = undefined;

/**
 * Additional constraints, if set means true
 * @member {Array.<String>} constraints
 */
AchievementAllOf.prototype['constraints'] = undefined;






export default AchievementAllOf;

