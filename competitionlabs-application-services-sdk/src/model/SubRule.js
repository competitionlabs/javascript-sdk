/**
 * CompetitionLabs Admin Services
 * CompetitionLabs Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubRule model module.
 * @module model/SubRule
 * @version 3.0.1
 */
class SubRule {
    /**
     * Constructs a new <code>SubRule</code>.
     * @alias module:model/SubRule
     * @param fact {String} Fact for this sub rule. Reference of Fact schemma
     * @param operator {String} EXAMPLES: * \"==\" : is * \">=\" : is equal to or more than * \">\" : is more than * \"<=\" : is less than or equal to * \"<\" : is less than * \"\" : are not all * \"before\" : is before * \"after\" : is after * \"on.or.after\" : is or or after * \"on.or.before\" : is on or before 
     * @param constant {String} A rules value that defines the fact
     */
    constructor(fact, operator, constant) { 
        
        SubRule.initialize(this, fact, operator, constant);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fact, operator, constant) { 
        obj['fact'] = fact;
        obj['operator'] = operator;
        obj['constant'] = constant;
    }

    /**
     * Constructs a <code>SubRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubRule} obj Optional instance to populate.
     * @return {module:model/SubRule} The populated <code>SubRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubRule();

            if (data.hasOwnProperty('fact')) {
                obj['fact'] = ApiClient.convertToType(data['fact'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('constant')) {
                obj['constant'] = ApiClient.convertToType(data['constant'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Fact for this sub rule. Reference of Fact schemma
 * @member {String} fact
 */
SubRule.prototype['fact'] = undefined;

/**
 * EXAMPLES: * \"==\" : is * \">=\" : is equal to or more than * \">\" : is more than * \"<=\" : is less than or equal to * \"<\" : is less than * \"\" : are not all * \"before\" : is before * \"after\" : is after * \"on.or.after\" : is or or after * \"on.or.before\" : is on or before 
 * @member {String} operator
 */
SubRule.prototype['operator'] = undefined;

/**
 * A rules value that defines the fact
 * @member {String} constant
 */
SubRule.prototype['constant'] = undefined;






export default SubRule;

