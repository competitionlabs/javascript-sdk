/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';
import RuleScope from './RuleScope';

/**
 * The RuleSet model module.
 * @module model/RuleSet
 * @version 1.0.0
 */
class RuleSet {
    /**
     * Constructs a new <code>RuleSet</code>.
     * @alias module:model/RuleSet
     * @param priority {Number} Indicates which rule is prioritised first so that the rules work in a sequence
     * @param scope {module:model/RuleScope} 
     * @param action {String} Action of this ruleset. Reference of Action schemma
     * @param conditions {Array.<module:model/Condition>} 
     */
    constructor(priority, scope, action, conditions) { 
        
        RuleSet.initialize(this, priority, scope, action, conditions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, priority, scope, action, conditions) { 
        obj['priority'] = priority;
        obj['scope'] = scope;
        obj['action'] = action;
        obj['conditions'] = conditions;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['priority'];
        obj['scope'];
        obj['action'];
        obj['conditions'];
        obj['onMatchThen'];
        obj['onMatchConstant'];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['priority'];
        obj["fields"]['scope'];
        obj["fields"]['action'];
        obj["fields"]['conditions'];
        obj["fields"]['onMatchThen'];
        obj["fields"]['onMatchConstant'];

        
        obj["requiredFields"]['priority'];
        obj["requiredFields"]['scope'];
        obj["requiredFields"]['action'];
        obj["requiredFields"]['conditions'];

        return obj;
    }

    /**
     * Constructs a <code>RuleSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleSet} obj Optional instance to populate.
     * @return {module:model/RuleSet} The populated <code>RuleSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleSet();

            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = RuleScope.constructFromObject(data['scope']);
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [Condition]);
            }
            if (data.hasOwnProperty('onMatchThen')) {
                obj['onMatchThen'] = ApiClient.convertToType(data['onMatchThen'], 'String');
            }
            if (data.hasOwnProperty('onMatchConstant')) {
                obj['onMatchConstant'] = ApiClient.convertToType(data['onMatchConstant'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Indicates which rule is prioritised first so that the rules work in a sequence
 * @member {Number} priority
 */
RuleSet.prototype['priority'] = undefined;

/**
 * @member {module:model/RuleScope} scope
 */
RuleSet.prototype['scope'] = undefined;

/**
 * Action of this ruleset. Reference of Action schemma
 * @member {String} action
 */
RuleSet.prototype['action'] = undefined;

/**
 * @member {Array.<module:model/Condition>} conditions
 */
RuleSet.prototype['conditions'] = undefined;

/**
 * Only Required when \"Custom points\" action is selected Allowed values: * add: Add points when the rules are met * subtract: Subtract points when the rules are met * multiply.points: Multiply event points by a value that will be selected * multiply.source: Use my adjustment factor that overwites the existing product adjustment factor 
 * @member {String} onMatchThen
 */
RuleSet.prototype['onMatchThen'] = undefined;

/**
 * Only Required when \"Custom points\" action is selected. Itâ€™s a value that represent how many points will be added, subtracted or multiplied
 * @member {String} onMatchConstant
 */
RuleSet.prototype['onMatchConstant'] = undefined;






export default RuleSet;

