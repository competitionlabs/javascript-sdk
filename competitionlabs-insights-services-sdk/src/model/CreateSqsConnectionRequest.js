/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateConnectionRequest from './CreateConnectionRequest';
import CreateSqsConnectionRequestAllOf from './CreateSqsConnectionRequestAllOf';

/**
 * The CreateSqsConnectionRequest model module.
 * @module model/CreateSqsConnectionRequest
 * @version 1.0.0
 */
class CreateSqsConnectionRequest {
    /**
     * Constructs a new <code>CreateSqsConnectionRequest</code>.
     * @alias module:model/CreateSqsConnectionRequest
     * @implements module:model/CreateConnectionRequest
     * @implements module:model/CreateSqsConnectionRequestAllOf
     * @param objectType {String} The type of consumer to create like Kafka, RabbitMQ or SQS
     * @param name {String} The name of the consumer
     * @param uri {String} The SQS endpoint.
     * @param acessKey {String} The access key of the IAM user
     * @param secretKey {String} The secret key of IAM user
     * @param transformerId {String} The id of the transformer to handle incoming messages
     */
    constructor(objectType, name, uri, acessKey, secretKey, transformerId) { 
        CreateConnectionRequest.initialize(this, objectType);CreateSqsConnectionRequestAllOf.initialize(this, name, uri, acessKey, secretKey, transformerId);
        CreateSqsConnectionRequest.initialize(this, objectType, name, uri, acessKey, secretKey, transformerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectType, name, uri, acessKey, secretKey, transformerId) { 
        obj['objectType'] = objectType;
        obj['name'] = name;
        obj['uri'] = uri;
        obj['acessKey'] = acessKey;
        obj['secretKey'] = secretKey;
        obj['transformerId'] = transformerId;
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['objectType'];
        obj['name'];
        obj['uri'];
        obj['acessKey'];
        obj['secretKey'];
        obj['transformerId'];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['objectType'];
        obj["fields"]['name'];
        obj["fields"]['uri'];
        obj["fields"]['acessKey'];
        obj["fields"]['secretKey'];
        obj["fields"]['transformerId'];

        
        obj["requiredFields"]['objectType'];
        obj["requiredFields"]['name'];
        obj["requiredFields"]['uri'];
        obj["requiredFields"]['acessKey'];
        obj["requiredFields"]['secretKey'];
        obj["requiredFields"]['transformerId'];

        return obj;
    }

    /**
     * Constructs a <code>CreateSqsConnectionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSqsConnectionRequest} obj Optional instance to populate.
     * @return {module:model/CreateSqsConnectionRequest} The populated <code>CreateSqsConnectionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSqsConnectionRequest();
            CreateConnectionRequest.constructFromObject(data, obj);
            CreateSqsConnectionRequestAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('acessKey')) {
                obj['acessKey'] = ApiClient.convertToType(data['acessKey'], 'String');
            }
            if (data.hasOwnProperty('secretKey')) {
                obj['secretKey'] = ApiClient.convertToType(data['secretKey'], 'String');
            }
            if (data.hasOwnProperty('transformerId')) {
                obj['transformerId'] = ApiClient.convertToType(data['transformerId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The type of consumer to create like Kafka, RabbitMQ or SQS
 * @member {String} objectType
 */
CreateSqsConnectionRequest.prototype['objectType'] = undefined;

/**
 * The name of the consumer
 * @member {String} name
 */
CreateSqsConnectionRequest.prototype['name'] = undefined;

/**
 * The SQS endpoint.
 * @member {String} uri
 */
CreateSqsConnectionRequest.prototype['uri'] = undefined;

/**
 * The access key of the IAM user
 * @member {String} acessKey
 */
CreateSqsConnectionRequest.prototype['acessKey'] = undefined;

/**
 * The secret key of IAM user
 * @member {String} secretKey
 */
CreateSqsConnectionRequest.prototype['secretKey'] = undefined;

/**
 * The id of the transformer to handle incoming messages
 * @member {String} transformerId
 */
CreateSqsConnectionRequest.prototype['transformerId'] = undefined;


// Implement CreateConnectionRequest interface:
/**
 * The type of consumer to create like Kafka, RabbitMQ or SQS
 * @member {String} objectType
 */
CreateConnectionRequest.prototype['objectType'] = undefined;
// Implement CreateSqsConnectionRequestAllOf interface:
/**
 * The name of the consumer
 * @member {String} name
 */
CreateSqsConnectionRequestAllOf.prototype['name'] = undefined;
/**
 * The SQS endpoint.
 * @member {String} uri
 */
CreateSqsConnectionRequestAllOf.prototype['uri'] = undefined;
/**
 * The access key of the IAM user
 * @member {String} acessKey
 */
CreateSqsConnectionRequestAllOf.prototype['acessKey'] = undefined;
/**
 * The secret key of IAM user
 * @member {String} secretKey
 */
CreateSqsConnectionRequestAllOf.prototype['secretKey'] = undefined;
/**
 * The id of the transformer to handle incoming messages
 * @member {String} transformerId
 */
CreateSqsConnectionRequestAllOf.prototype['transformerId'] = undefined;




export default CreateSqsConnectionRequest;

