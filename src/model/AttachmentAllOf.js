/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';

/**
 * The AttachmentAllOf model module.
 * @module model/AttachmentAllOf
 * @version 1.0.1
 */
class AttachmentAllOf {
    /**
     * Constructs a new <code>AttachmentAllOf</code>.
     * @alias module:model/AttachmentAllOf
     * @param attachmentType {String} A type of an attachement
     * @param md5Hash {String} Hash of the file contents to identify duplicates
     * @param fileName {String} Name of the original file uploaded
     * @param mimeType {String} Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excel
     * @param extension {String} Extension of the file uploaded. Valid extensions supported - csv, xlsx, xls
     * @param locationKey {String} The name of the attachment within the bucket
     * @param locationFolder {String} The folder name containing the attachment within the bucket
     * @param permission {Number} 
     */
    constructor(attachmentType, md5Hash, fileName, mimeType, extension, locationKey, locationFolder, permission) { 
        
        AttachmentAllOf.initialize(this, attachmentType, md5Hash, fileName, mimeType, extension, locationKey, locationFolder, permission);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['attachmentType'] = null;
        obj['md5Hash'] = null;
        obj['fileName'] = null;
        obj['mimeType'] = null;
        obj['extension'] = null;
        obj['locationKey'] = null;
        obj['locationFolder'] = null;
        obj['permission'] = null;
        obj['metadata'] = [new Metadata().model()];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['attachmentType'] = { "type": 'String' };
        obj["fields"]['md5Hash'] = { "type": 'String' };
        obj["fields"]['fileName'] = { "type": 'String' };
        obj["fields"]['mimeType'] = { "type": 'String' };
        obj["fields"]['extension'] = { "type": 'String' };
        obj["fields"]['locationKey'] = { "type": 'String' };
        obj["fields"]['locationFolder'] = { "type": 'String' };
        obj["fields"]['permission'] = { "type": 'Number' };
        obj["fields"]['metadata'] = [new Metadata().modelMap()];

        
        obj["requiredFields"]['attachmentType'] = { "type": 'String' };
        obj["requiredFields"]['md5Hash'] = { "type": 'String' };
        obj["requiredFields"]['fileName'] = { "type": 'String' };
        obj["requiredFields"]['mimeType'] = { "type": 'String' };
        obj["requiredFields"]['extension'] = { "type": 'String' };
        obj["requiredFields"]['locationKey'] = { "type": 'String' };
        obj["requiredFields"]['locationFolder'] = { "type": 'String' };
        obj["requiredFields"]['permission'] = { "type": 'Number' };

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attachmentType, md5Hash, fileName, mimeType, extension, locationKey, locationFolder, permission) { 
        obj['attachmentType'] = attachmentType;
        obj['md5Hash'] = md5Hash;
        obj['fileName'] = fileName;
        obj['mimeType'] = mimeType;
        obj['extension'] = extension;
        obj['locationKey'] = locationKey;
        obj['locationFolder'] = locationFolder;
        obj['permission'] = permission;
    }

    /**
     * Constructs a <code>AttachmentAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttachmentAllOf} obj Optional instance to populate.
     * @return {module:model/AttachmentAllOf} The populated <code>AttachmentAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttachmentAllOf();

            if (data.hasOwnProperty('attachmentType')) {
                obj['attachmentType'] = ApiClient.convertToType(data['attachmentType'], 'String');
            }
            if (data.hasOwnProperty('md5Hash')) {
                obj['md5Hash'] = ApiClient.convertToType(data['md5Hash'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('locationKey')) {
                obj['locationKey'] = ApiClient.convertToType(data['locationKey'], 'String');
            }
            if (data.hasOwnProperty('locationFolder')) {
                obj['locationFolder'] = ApiClient.convertToType(data['locationFolder'], 'String');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
        }
        return obj;
    }


}

/**
 * A type of an attachement
 * @member {String} attachmentType
 */
AttachmentAllOf.prototype['attachmentType'] = undefined;

/**
 * Hash of the file contents to identify duplicates
 * @member {String} md5Hash
 */
AttachmentAllOf.prototype['md5Hash'] = undefined;

/**
 * Name of the original file uploaded
 * @member {String} fileName
 */
AttachmentAllOf.prototype['fileName'] = undefined;

/**
 * Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excel
 * @member {String} mimeType
 */
AttachmentAllOf.prototype['mimeType'] = undefined;

/**
 * Extension of the file uploaded. Valid extensions supported - csv, xlsx, xls
 * @member {String} extension
 */
AttachmentAllOf.prototype['extension'] = undefined;

/**
 * The name of the attachment within the bucket
 * @member {String} locationKey
 */
AttachmentAllOf.prototype['locationKey'] = undefined;

/**
 * The folder name containing the attachment within the bucket
 * @member {String} locationFolder
 */
AttachmentAllOf.prototype['locationFolder'] = undefined;

/**
 * @member {Number} permission
 * @default 744
 */
AttachmentAllOf.prototype['permission'] = 744;

/**
 * @member {Array.<module:model/Metadata>} metadata
 */
AttachmentAllOf.prototype['metadata'] = undefined;






export default AttachmentAllOf;

