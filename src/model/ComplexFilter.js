/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComplexFilter model module.
 * @module model/ComplexFilter
 * @version 1.0.1
 */
class ComplexFilter {
    /**
     * Constructs a new <code>ComplexFilter</code>.
     * @alias module:model/ComplexFilter
     */
    constructor() { 
        
        ComplexFilter.initialize(this);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['must'] = [null];
        obj['mustNot'] = [null];
        obj['should'] = [null];
        obj['shouldMatchAtLeast'] = null;

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['must'] = [{ "type": 'String', "system": false }];
        obj["fields"]['mustNot'] = [{ "type": 'String', "system": false }];
        obj["fields"]['should'] = [{ "type": 'String', "system": false }];
        obj["fields"]['shouldMatchAtLeast'] = { "type": 'Number', "system": false };

        

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComplexFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComplexFilter} obj Optional instance to populate.
     * @return {module:model/ComplexFilter} The populated <code>ComplexFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComplexFilter();

            if (data.hasOwnProperty('must')) {
                obj['must'] = ApiClient.convertToType(data['must'], ['String']);
            }
            if (data.hasOwnProperty('mustNot')) {
                obj['mustNot'] = ApiClient.convertToType(data['mustNot'], ['String']);
            }
            if (data.hasOwnProperty('should')) {
                obj['should'] = ApiClient.convertToType(data['should'], ['String']);
            }
            if (data.hasOwnProperty('shouldMatchAtLeast')) {
                obj['shouldMatchAtLeast'] = ApiClient.convertToType(data['shouldMatchAtLeast'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate
 * @member {Array.<String>} must
 */
ComplexFilter.prototype['must'] = undefined;

/**
 * A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate
 * @member {Array.<String>} mustNot
 */
ComplexFilter.prototype['mustNot'] = undefined;

/**
 * A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate
 * @member {Array.<String>} should
 */
ComplexFilter.prototype['should'] = undefined;

/**
 * Dependant on should. Triggered when 2 or more should parameters selected
 * @member {Number} shouldMatchAtLeast
 * @default 0
 */
ComplexFilter.prototype['shouldMatchAtLeast'] = 0;






export default ComplexFilter;

