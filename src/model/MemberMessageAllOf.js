/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventRefType from './EventRefType';
import MessagStatus from './MessagStatus';
import MessageType from './MessageType';

/**
 * The MemberMessageAllOf model module.
 * @module model/MemberMessageAllOf
 * @version 1.0.1
 */
class MemberMessageAllOf {
    /**
     * Constructs a new <code>MemberMessageAllOf</code>.
     * @alias module:model/MemberMessageAllOf
     * @param eventRefType {module:model/EventRefType} 
     * @param eventReferenceId {String} The reference ID of the event object
     * @param messageType {module:model/MessageType} 
     * @param subject {String} The title of the message
     * @param body {String} The context of the message
     * @param prize {String} Unique system identifier of an Award
     * @param status {module:model/MessagStatus} 
     * @param expiry {Date} The time that the message will disappear after. ISO8601 timestamp
     */
    constructor(eventRefType, eventReferenceId, messageType, subject, body, prize, status, expiry) { 
        
        MemberMessageAllOf.initialize(this, eventRefType, eventReferenceId, messageType, subject, body, prize, status, expiry);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['eventRefType'] = new EventRefType().model();
        obj['eventReferenceId'] = null;
        obj['messageType'] = new MessageType().model();
        obj['subject'] = null;
        obj['body'] = null;
        obj['prize'] = null;
        obj['status'] = new MessagStatus().model();
        obj['expiry'] = null;

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['eventRefType'] = new EventRefType().modelMap();
        obj["fields"]['eventReferenceId'] = { "type": 'String' };
        obj["fields"]['messageType'] = new MessageType().modelMap();
        obj["fields"]['subject'] = { "type": 'String' };
        obj["fields"]['body'] = { "type": 'String' };
        obj["fields"]['prize'] = { "type": 'String' };
        obj["fields"]['status'] = new MessagStatus().modelMap();
        obj["fields"]['expiry'] = { "type": 'Date' };

        
        obj["requiredFields"]['eventRefType'] = new EventRefType().modelMap();
        obj["requiredFields"]['eventReferenceId'] = { "type": 'String' };
        obj["requiredFields"]['messageType'] = new MessageType().modelMap();
        obj["requiredFields"]['subject'] = { "type": 'String' };
        obj["requiredFields"]['body'] = { "type": 'String' };
        obj["requiredFields"]['prize'] = { "type": 'String' };
        obj["requiredFields"]['status'] = new MessagStatus().modelMap();
        obj["requiredFields"]['expiry'] = { "type": 'Date' };

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventRefType, eventReferenceId, messageType, subject, body, prize, status, expiry) { 
        obj['eventRefType'] = eventRefType;
        obj['eventReferenceId'] = eventReferenceId;
        obj['messageType'] = messageType;
        obj['subject'] = subject;
        obj['body'] = body;
        obj['prize'] = prize;
        obj['status'] = status;
        obj['expiry'] = expiry;
    }

    /**
     * Constructs a <code>MemberMessageAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberMessageAllOf} obj Optional instance to populate.
     * @return {module:model/MemberMessageAllOf} The populated <code>MemberMessageAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberMessageAllOf();

            if (data.hasOwnProperty('eventRefType')) {
                obj['eventRefType'] = EventRefType.constructFromObject(data['eventRefType']);
            }
            if (data.hasOwnProperty('eventReferenceId')) {
                obj['eventReferenceId'] = ApiClient.convertToType(data['eventReferenceId'], 'String');
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = MessageType.constructFromObject(data['messageType']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('prize')) {
                obj['prize'] = ApiClient.convertToType(data['prize'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = MessagStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/EventRefType} eventRefType
 */
MemberMessageAllOf.prototype['eventRefType'] = undefined;

/**
 * The reference ID of the event object
 * @member {String} eventReferenceId
 */
MemberMessageAllOf.prototype['eventReferenceId'] = undefined;

/**
 * @member {module:model/MessageType} messageType
 */
MemberMessageAllOf.prototype['messageType'] = undefined;

/**
 * The title of the message
 * @member {String} subject
 */
MemberMessageAllOf.prototype['subject'] = undefined;

/**
 * The context of the message
 * @member {String} body
 */
MemberMessageAllOf.prototype['body'] = undefined;

/**
 * Unique system identifier of an Award
 * @member {String} prize
 */
MemberMessageAllOf.prototype['prize'] = undefined;

/**
 * @member {module:model/MessagStatus} status
 */
MemberMessageAllOf.prototype['status'] = undefined;

/**
 * The time that the message will disappear after. ISO8601 timestamp
 * @member {Date} expiry
 */
MemberMessageAllOf.prototype['expiry'] = undefined;






export default MemberMessageAllOf;

