/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContestStatus from './ContestStatus';

/**
 * The ContestReducedAllOf model module.
 * @module model/ContestReducedAllOf
 * @version 1.0.0
 */
class ContestReducedAllOf {
    /**
     * Constructs a new <code>ContestReducedAllOf</code>.
     * @alias module:model/ContestReducedAllOf
     * @param competitionId {String} A unique identifier of a Competition
     * @param _number {Number} The row number for displaying the Contest in a table
     * @param name {String} A name for the Contest. Can be translated
     * @param round {Number} To what round does the contest belong
     * @param groupStage {Number} Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
     * @param entrantsFromContest {Array.<String>} A list of CompetitionLabs contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
     * @param status {module:model/ContestStatus} 
     * @param statusCode {Number} The code of the contest
     * @param scheduledStartDate {Date} ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     * @param scheduledEndDate {Date} ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     */
    constructor(competitionId, _number, name, round, groupStage, entrantsFromContest, status, statusCode, scheduledStartDate, scheduledEndDate) { 
        
        ContestReducedAllOf.initialize(this, competitionId, _number, name, round, groupStage, entrantsFromContest, status, statusCode, scheduledStartDate, scheduledEndDate);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['competitionId'] = null;
        obj['number'] = null;
        obj['name'] = null;
        obj['round'] = null;
        obj['groupStage'] = null;
        obj['entrantsFromContest'] = [null];
        obj['status'] = new ContestStatus().model();
        obj['statusCode'] = null;
        obj['scheduledStartDate'] = null;
        obj['scheduledEndDate'] = null;
        obj['actualStartDate'] = null;
        obj['actualEndDate'] = null;

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['competitionId'] = { "type": 'String' };
        obj["fields"]['number'] = { "type": 'Number' };
        obj["fields"]['name'] = { "type": 'String' };
        obj["fields"]['round'] = { "type": 'Number' };
        obj["fields"]['groupStage'] = { "type": 'Number' };
        obj["fields"]['entrantsFromContest'] = [{ "type": 'String' }];
        obj["fields"]['status'] = new ContestStatus().modelMap();
        obj["fields"]['statusCode'] = { "type": 'Number' };
        obj["fields"]['scheduledStartDate'] = { "type": 'Date' };
        obj["fields"]['scheduledEndDate'] = { "type": 'Date' };
        obj["fields"]['actualStartDate'] = { "type": 'Date' };
        obj["fields"]['actualEndDate'] = { "type": 'Date' };

        
        obj["requiredFields"]['competitionId'] = { "type": 'String' };
        obj["requiredFields"]['number'] = { "type": 'Number' };
        obj["requiredFields"]['name'] = { "type": 'String' };
        obj["requiredFields"]['round'] = { "type": 'Number' };
        obj["requiredFields"]['groupStage'] = { "type": 'Number' };
        obj["requiredFields"]['entrantsFromContest'] = [{ "type": 'String' }];
        obj["requiredFields"]['status'] = new ContestStatus().modelMap();
        obj["requiredFields"]['statusCode'] = { "type": 'Number' };
        obj["requiredFields"]['scheduledStartDate'] = { "type": 'Date' };
        obj["requiredFields"]['scheduledEndDate'] = { "type": 'Date' };

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, competitionId, _number, name, round, groupStage, entrantsFromContest, status, statusCode, scheduledStartDate, scheduledEndDate) { 
        obj['competitionId'] = competitionId;
        obj['number'] = _number;
        obj['name'] = name;
        obj['round'] = round;
        obj['groupStage'] = groupStage;
        obj['entrantsFromContest'] = entrantsFromContest;
        obj['status'] = status;
        obj['statusCode'] = statusCode;
        obj['scheduledStartDate'] = scheduledStartDate;
        obj['scheduledEndDate'] = scheduledEndDate;
    }

    /**
     * Constructs a <code>ContestReducedAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContestReducedAllOf} obj Optional instance to populate.
     * @return {module:model/ContestReducedAllOf} The populated <code>ContestReducedAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContestReducedAllOf();

            if (data.hasOwnProperty('competitionId')) {
                obj['competitionId'] = ApiClient.convertToType(data['competitionId'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('round')) {
                obj['round'] = ApiClient.convertToType(data['round'], 'Number');
            }
            if (data.hasOwnProperty('groupStage')) {
                obj['groupStage'] = ApiClient.convertToType(data['groupStage'], 'Number');
            }
            if (data.hasOwnProperty('entrantsFromContest')) {
                obj['entrantsFromContest'] = ApiClient.convertToType(data['entrantsFromContest'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ContestStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('scheduledStartDate')) {
                obj['scheduledStartDate'] = ApiClient.convertToType(data['scheduledStartDate'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndDate')) {
                obj['scheduledEndDate'] = ApiClient.convertToType(data['scheduledEndDate'], 'Date');
            }
            if (data.hasOwnProperty('actualStartDate')) {
                obj['actualStartDate'] = ApiClient.convertToType(data['actualStartDate'], 'Date');
            }
            if (data.hasOwnProperty('actualEndDate')) {
                obj['actualEndDate'] = ApiClient.convertToType(data['actualEndDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */
ContestReducedAllOf.prototype['competitionId'] = undefined;

/**
 * The row number for displaying the Contest in a table
 * @member {Number} number
 * @default 0
 */
ContestReducedAllOf.prototype['number'] = 0;

/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */
ContestReducedAllOf.prototype['name'] = undefined;

/**
 * To what round does the contest belong
 * @member {Number} round
 * @default 1
 */
ContestReducedAllOf.prototype['round'] = 1;

/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 * @default 1
 */
ContestReducedAllOf.prototype['groupStage'] = 1;

/**
 * A list of CompetitionLabs contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
 * @member {Array.<String>} entrantsFromContest
 */
ContestReducedAllOf.prototype['entrantsFromContest'] = undefined;

/**
 * @member {module:model/ContestStatus} status
 */
ContestReducedAllOf.prototype['status'] = undefined;

/**
 * The code of the contest
 * @member {Number} statusCode
 * @default 3
 */
ContestReducedAllOf.prototype['statusCode'] = 3;

/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
ContestReducedAllOf.prototype['scheduledStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
ContestReducedAllOf.prototype['scheduledEndDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */
ContestReducedAllOf.prototype['actualStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */
ContestReducedAllOf.prototype['actualEndDate'] = undefined;






export default ContestReducedAllOf;

