/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HostingOptions from './HostingOptions';

/**
 * The UpdateRepositoryRequestAllOf model module.
 * @module model/UpdateRepositoryRequestAllOf
 * @version 1.0.0
 */
class UpdateRepositoryRequestAllOf {
    /**
     * Constructs a new <code>UpdateRepositoryRequestAllOf</code>.
     * @alias module:model/UpdateRepositoryRequestAllOf
     */
    constructor() { 
        
        UpdateRepositoryRequestAllOf.initialize(this);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['description'] = null;
        obj['tags'] = [null];
        obj['constraints'] = [null];
        obj['hostingOptions'] = new HostingOptions().model();

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['description'] = { "type": 'String' };
        obj["fields"]['tags'] = [{ "type": 'String' }];
        obj["fields"]['constraints'] = [{ "type": 'String' }];
        obj["fields"]['hostingOptions'] = new HostingOptions().modelMap();

        

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateRepositoryRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateRepositoryRequestAllOf} obj Optional instance to populate.
     * @return {module:model/UpdateRepositoryRequestAllOf} The populated <code>UpdateRepositoryRequestAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateRepositoryRequestAllOf();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
            if (data.hasOwnProperty('hostingOptions')) {
                obj['hostingOptions'] = HostingOptions.constructFromObject(data['hostingOptions']);
            }
        }
        return obj;
    }


}

/**
 * The description of the repository
 * @member {String} description
 */
UpdateRepositoryRequestAllOf.prototype['description'] = undefined;

/**
 * The tags used to categorize the repository
 * @member {Array.<String>} tags
 */
UpdateRepositoryRequestAllOf.prototype['tags'] = undefined;

/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
UpdateRepositoryRequestAllOf.prototype['constraints'] = undefined;

/**
 * @member {module:model/HostingOptions} hostingOptions
 */
UpdateRepositoryRequestAllOf.prototype['hostingOptions'] = undefined;






export default UpdateRepositoryRequestAllOf;

