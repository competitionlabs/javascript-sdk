/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContestAllOf from './ContestAllOf';
import ContestStatus from './ContestStatus';
import Metadata from './Metadata';
import ModelDefault from './ModelDefault';
import RewardReduced from './RewardReduced';
import RoundType from './RoundType';
import RuleSet from './RuleSet';
import Strategy from './Strategy';
import Translation from './Translation';

/**
 * The Contest model module.
 * @module model/Contest
 * @version 1.0.1
 */
class Contest {
    /**
     * Constructs a new <code>Contest</code>.
     * @alias module:model/Contest
     * @implements module:model/ModelDefault
     * @implements module:model/ContestAllOf
     * @param id {String} A unique system generated identifier
     * @param spaceName {String} This is the space name which is linked to the account
     * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     * @param competitionId {String} A unique identifier of a Competition
     * @param _number {Number} The row number for displaying the Contest in a table
     * @param name {String} A name for the Contest. Can be translated
     * @param round {Number} To what round does the contest belong
     * @param roundType {module:model/RoundType} 
     * @param entrantsFromContest {Array.<String>} A list of CompetitionLabs contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
     * @param minNumberOfEntrants {Number} Minimum number of entrants for the contest
     * @param ruleSets {Array.<module:model/RuleSet>} 
     * @param isPublic {Boolean} Is the event publicly exposed depending on the event model
     * @param scheduledStartDate {Date} ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     * @param scheduledEndDate {Date} ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     * @param status {module:model/ContestStatus} 
     * @param statusCode {Number} The code of the contest
     */
    constructor(id, spaceName, created, competitionId, _number, name, round, roundType, entrantsFromContest, minNumberOfEntrants, ruleSets, isPublic, scheduledStartDate, scheduledEndDate, status, statusCode) { 
        ModelDefault.initialize(this, id, spaceName, created);ContestAllOf.initialize(this, competitionId, _number, name, round, roundType, entrantsFromContest, minNumberOfEntrants, ruleSets, isPublic, scheduledStartDate, scheduledEndDate, status, statusCode);
        Contest.initialize(this, id, spaceName, created, competitionId, _number, name, round, roundType, entrantsFromContest, minNumberOfEntrants, ruleSets, isPublic, scheduledStartDate, scheduledEndDate, status, statusCode);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['id'] = null;
        obj['spaceName'] = null;
        obj['created'] = null;
        obj['competitionId'] = null;
        obj['number'] = null;
        obj['name'] = null;
        obj['description'] = null;
        obj['termsConditions'] = null;
        obj['round'] = null;
        obj['roundType'] = new RoundType().model();
        obj['groupStage'] = null;
        obj['groupStageLabel'] = null;
        obj['entrantsFromContest'] = [null];
        obj['maxNumberOfEntrants'] = null;
        obj['minNumberOfEntrants'] = null;
        obj['ruleSets'] = [new RuleSet().model()];
        obj['isPublic'] = null;
        obj['autoStart'] = null;
        obj['scheduledStartDate'] = null;
        obj['scheduledEndDate'] = null;
        obj['actualStartDate'] = null;
        obj['actualEndDate'] = null;
        obj['strategies'] = new Strategy().model();
        obj['metadata'] = [new Metadata().model()];
        obj['translations'] = [new Translation().model()];
        obj['translatableFields'] = [null];
        obj['status'] = new ContestStatus().model();
        obj['statusCode'] = null;
        obj['rewards'] = [new RewardReduced().model()];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['id'] = { "type": 'String' };
        obj["fields"]['spaceName'] = { "type": 'String' };
        obj["fields"]['created'] = { "type": 'Date' };
        obj["fields"]['competitionId'] = { "type": 'String' };
        obj["fields"]['number'] = { "type": 'Number' };
        obj["fields"]['name'] = { "type": 'String' };
        obj["fields"]['description'] = { "type": 'String' };
        obj["fields"]['termsConditions'] = { "type": 'String' };
        obj["fields"]['round'] = { "type": 'Number' };
        obj["fields"]['roundType'] = new RoundType().modelMap();
        obj["fields"]['groupStage'] = { "type": 'Number' };
        obj["fields"]['groupStageLabel'] = { "type": 'String' };
        obj["fields"]['entrantsFromContest'] = [{ "type": 'String' }];
        obj["fields"]['maxNumberOfEntrants'] = { "type": 'Number' };
        obj["fields"]['minNumberOfEntrants'] = { "type": 'Number' };
        obj["fields"]['ruleSets'] = [new RuleSet().modelMap()];
        obj["fields"]['isPublic'] = { "type": 'Boolean' };
        obj["fields"]['autoStart'] = { "type": 'Boolean' };
        obj["fields"]['scheduledStartDate'] = { "type": 'Date' };
        obj["fields"]['scheduledEndDate'] = { "type": 'Date' };
        obj["fields"]['actualStartDate'] = { "type": 'Date' };
        obj["fields"]['actualEndDate'] = { "type": 'Date' };
        obj["fields"]['strategies'] = new Strategy().modelMap();
        obj["fields"]['metadata'] = [new Metadata().modelMap()];
        obj["fields"]['translations'] = [new Translation().modelMap()];
        obj["fields"]['translatableFields'] = [{ "type": 'String' }];
        obj["fields"]['status'] = new ContestStatus().modelMap();
        obj["fields"]['statusCode'] = { "type": 'Number' };
        obj["fields"]['rewards'] = [new RewardReduced().modelMap()];

        
        obj["requiredFields"]['id'] = { "type": 'String' };
        obj["requiredFields"]['spaceName'] = { "type": 'String' };
        obj["requiredFields"]['created'] = { "type": 'Date' };
        obj["requiredFields"]['competitionId'] = { "type": 'String' };
        obj["requiredFields"]['number'] = { "type": 'Number' };
        obj["requiredFields"]['name'] = { "type": 'String' };
        obj["requiredFields"]['round'] = { "type": 'Number' };
        obj["requiredFields"]['roundType'] = new RoundType().modelMap();
        obj["requiredFields"]['entrantsFromContest'] = [{ "type": 'String' }];
        obj["requiredFields"]['minNumberOfEntrants'] = { "type": 'Number' };
        obj["requiredFields"]['ruleSets'] = [new RuleSet().modelMap()];
        obj["requiredFields"]['isPublic'] = { "type": 'Boolean' };
        obj["requiredFields"]['scheduledStartDate'] = { "type": 'Date' };
        obj["requiredFields"]['scheduledEndDate'] = { "type": 'Date' };
        obj["requiredFields"]['status'] = new ContestStatus().modelMap();
        obj["requiredFields"]['statusCode'] = { "type": 'Number' };

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, spaceName, created, competitionId, _number, name, round, roundType, entrantsFromContest, minNumberOfEntrants, ruleSets, isPublic, scheduledStartDate, scheduledEndDate, status, statusCode) { 
        obj['id'] = id;
        obj['spaceName'] = spaceName;
        obj['created'] = created;
        obj['competitionId'] = competitionId;
        obj['number'] = _number;
        obj['name'] = name;
        obj['round'] = round;
        obj['roundType'] = roundType;
        obj['entrantsFromContest'] = entrantsFromContest;
        obj['minNumberOfEntrants'] = minNumberOfEntrants;
        obj['ruleSets'] = ruleSets;
        obj['isPublic'] = isPublic;
        obj['scheduledStartDate'] = scheduledStartDate;
        obj['scheduledEndDate'] = scheduledEndDate;
        obj['status'] = status;
        obj['statusCode'] = statusCode;
    }

    /**
     * Constructs a <code>Contest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contest} obj Optional instance to populate.
     * @return {module:model/Contest} The populated <code>Contest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contest();
            ModelDefault.constructFromObject(data, obj);
            ContestAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('competitionId')) {
                obj['competitionId'] = ApiClient.convertToType(data['competitionId'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('termsConditions')) {
                obj['termsConditions'] = ApiClient.convertToType(data['termsConditions'], 'String');
            }
            if (data.hasOwnProperty('round')) {
                obj['round'] = ApiClient.convertToType(data['round'], 'Number');
            }
            if (data.hasOwnProperty('roundType')) {
                obj['roundType'] = RoundType.constructFromObject(data['roundType']);
            }
            if (data.hasOwnProperty('groupStage')) {
                obj['groupStage'] = ApiClient.convertToType(data['groupStage'], 'Number');
            }
            if (data.hasOwnProperty('groupStageLabel')) {
                obj['groupStageLabel'] = ApiClient.convertToType(data['groupStageLabel'], 'String');
            }
            if (data.hasOwnProperty('entrantsFromContest')) {
                obj['entrantsFromContest'] = ApiClient.convertToType(data['entrantsFromContest'], ['String']);
            }
            if (data.hasOwnProperty('maxNumberOfEntrants')) {
                obj['maxNumberOfEntrants'] = ApiClient.convertToType(data['maxNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('minNumberOfEntrants')) {
                obj['minNumberOfEntrants'] = ApiClient.convertToType(data['minNumberOfEntrants'], 'Number');
            }
            if (data.hasOwnProperty('ruleSets')) {
                obj['ruleSets'] = ApiClient.convertToType(data['ruleSets'], [RuleSet]);
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('autoStart')) {
                obj['autoStart'] = ApiClient.convertToType(data['autoStart'], 'Boolean');
            }
            if (data.hasOwnProperty('scheduledStartDate')) {
                obj['scheduledStartDate'] = ApiClient.convertToType(data['scheduledStartDate'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndDate')) {
                obj['scheduledEndDate'] = ApiClient.convertToType(data['scheduledEndDate'], 'Date');
            }
            if (data.hasOwnProperty('actualStartDate')) {
                obj['actualStartDate'] = ApiClient.convertToType(data['actualStartDate'], 'Date');
            }
            if (data.hasOwnProperty('actualEndDate')) {
                obj['actualEndDate'] = ApiClient.convertToType(data['actualEndDate'], 'Date');
            }
            if (data.hasOwnProperty('strategies')) {
                obj['strategies'] = Strategy.constructFromObject(data['strategies']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Translation]);
            }
            if (data.hasOwnProperty('translatableFields')) {
                obj['translatableFields'] = ApiClient.convertToType(data['translatableFields'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ContestStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('rewards')) {
                obj['rewards'] = ApiClient.convertToType(data['rewards'], [RewardReduced]);
            }
        }
        return obj;
    }


}

/**
 * A unique system generated identifier
 * @member {String} id
 */
Contest.prototype['id'] = undefined;

/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
Contest.prototype['spaceName'] = undefined;

/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
Contest.prototype['created'] = undefined;

/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */
Contest.prototype['competitionId'] = undefined;

/**
 * The row number for displaying the Contest in a table
 * @member {Number} number
 * @default 0
 */
Contest.prototype['number'] = 0;

/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */
Contest.prototype['name'] = undefined;

/**
 * Description of the contest
 * @member {String} description
 */
Contest.prototype['description'] = undefined;

/**
 * Terms and conditions for participating in the Contest. Can be translated
 * @member {String} termsConditions
 */
Contest.prototype['termsConditions'] = undefined;

/**
 * To what round does the contest belong
 * @member {Number} round
 * @default 1
 */
Contest.prototype['round'] = 1;

/**
 * @member {module:model/RoundType} roundType
 */
Contest.prototype['roundType'] = undefined;

/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 * @default 1
 */
Contest.prototype['groupStage'] = 1;

/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */
Contest.prototype['groupStageLabel'] = undefined;

/**
 * A list of CompetitionLabs contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
 * @member {Array.<String>} entrantsFromContest
 */
Contest.prototype['entrantsFromContest'] = undefined;

/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
Contest.prototype['maxNumberOfEntrants'] = undefined;

/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
Contest.prototype['minNumberOfEntrants'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} ruleSets
 */
Contest.prototype['ruleSets'] = undefined;

/**
 * Is the event publicly exposed depending on the event model
 * @member {Boolean} isPublic
 * @default true
 */
Contest.prototype['isPublic'] = true;

/**
 * Is the event publicly exposed depending on the event model
 * @member {Boolean} autoStart
 * @default true
 */
Contest.prototype['autoStart'] = true;

/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
Contest.prototype['scheduledStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
Contest.prototype['scheduledEndDate'] = undefined;

/**
 * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */
Contest.prototype['actualStartDate'] = undefined;

/**
 * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */
Contest.prototype['actualEndDate'] = undefined;

/**
 * @member {module:model/Strategy} strategies
 */
Contest.prototype['strategies'] = undefined;

/**
 * @member {Array.<module:model/Metadata>} metadata
 */
Contest.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Translation>} translations
 */
Contest.prototype['translations'] = undefined;

/**
 * Contests translatable fields
 * @member {Array.<String>} translatableFields
 */
Contest.prototype['translatableFields'] = undefined;

/**
 * @member {module:model/ContestStatus} status
 */
Contest.prototype['status'] = undefined;

/**
 * The code of the contest
 * @member {Number} statusCode
 * @default 3
 */
Contest.prototype['statusCode'] = 3;

/**
 * @member {Array.<module:model/RewardReduced>} rewards
 */
Contest.prototype['rewards'] = undefined;


// Implement ModelDefault interface:
/**
 * A unique system generated identifier
 * @member {String} id
 */
ModelDefault.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
ModelDefault.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
ModelDefault.prototype['created'] = undefined;
// Implement ContestAllOf interface:
/**
 * A unique identifier of a Competition
 * @member {String} competitionId
 */
ContestAllOf.prototype['competitionId'] = undefined;
/**
 * The row number for displaying the Contest in a table
 * @member {Number} number
 * @default 0
 */
ContestAllOf.prototype['number'] = 0;
/**
 * A name for the Contest. Can be translated
 * @member {String} name
 */
ContestAllOf.prototype['name'] = undefined;
/**
 * Description of the contest
 * @member {String} description
 */
ContestAllOf.prototype['description'] = undefined;
/**
 * Terms and conditions for participating in the Contest. Can be translated
 * @member {String} termsConditions
 */
ContestAllOf.prototype['termsConditions'] = undefined;
/**
 * To what round does the contest belong
 * @member {Number} round
 * @default 1
 */
ContestAllOf.prototype['round'] = 1;
/**
 * @member {module:model/RoundType} roundType
 */
ContestAllOf.prototype['roundType'] = undefined;
/**
 * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
 * @member {Number} groupStage
 * @default 1
 */
ContestAllOf.prototype['groupStage'] = 1;
/**
 * The name of the group stages
 * @member {String} groupStageLabel
 */
ContestAllOf.prototype['groupStageLabel'] = undefined;
/**
 * A list of CompetitionLabs contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
 * @member {Array.<String>} entrantsFromContest
 */
ContestAllOf.prototype['entrantsFromContest'] = undefined;
/**
 * Maximum number of entrants for the contest
 * @member {Number} maxNumberOfEntrants
 */
ContestAllOf.prototype['maxNumberOfEntrants'] = undefined;
/**
 * Minimum number of entrants for the contest
 * @member {Number} minNumberOfEntrants
 */
ContestAllOf.prototype['minNumberOfEntrants'] = undefined;
/**
 * @member {Array.<module:model/RuleSet>} ruleSets
 */
ContestAllOf.prototype['ruleSets'] = undefined;
/**
 * Is the event publicly exposed depending on the event model
 * @member {Boolean} isPublic
 * @default true
 */
ContestAllOf.prototype['isPublic'] = true;
/**
 * Is the event publicly exposed depending on the event model
 * @member {Boolean} autoStart
 * @default true
 */
ContestAllOf.prototype['autoStart'] = true;
/**
 * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
 * @member {Date} scheduledStartDate
 */
ContestAllOf.prototype['scheduledStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
 * @member {Date} scheduledEndDate
 */
ContestAllOf.prototype['scheduledEndDate'] = undefined;
/**
 * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
 * @member {Date} actualStartDate
 */
ContestAllOf.prototype['actualStartDate'] = undefined;
/**
 * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
 * @member {Date} actualEndDate
 */
ContestAllOf.prototype['actualEndDate'] = undefined;
/**
 * @member {module:model/Strategy} strategies
 */
ContestAllOf.prototype['strategies'] = undefined;
/**
 * @member {Array.<module:model/Metadata>} metadata
 */
ContestAllOf.prototype['metadata'] = undefined;
/**
 * @member {Array.<module:model/Translation>} translations
 */
ContestAllOf.prototype['translations'] = undefined;
/**
 * Contests translatable fields
 * @member {Array.<String>} translatableFields
 */
ContestAllOf.prototype['translatableFields'] = undefined;
/**
 * @member {module:model/ContestStatus} status
 */
ContestAllOf.prototype['status'] = undefined;
/**
 * The code of the contest
 * @member {Number} statusCode
 * @default 3
 */
ContestAllOf.prototype['statusCode'] = 3;
/**
 * @member {Array.<module:model/RewardReduced>} rewards
 */
ContestAllOf.prototype['rewards'] = undefined;




export default Contest;

