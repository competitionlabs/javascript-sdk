/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventAllOf from './EventAllOf';
import EventMetadata from './EventMetadata';
import ModelDefault from './ModelDefault';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.0.1
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     * @implements module:model/ModelDefault
     * @implements module:model/EventAllOf
     * @param id {String} A unique system generated identifier
     * @param spaceName {String} This is the space name which is linked to the account
     * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     * @param memberId {String} Unique system identifier of a Member
     * @param action {String} The identifier that describes the meaning of this event
     * @param entityId {String} It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
     * @param sourceValue {Number} The actual numerical value related to the event
     * @param points {Number} A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
     * @param transactionTimestamp {Date} ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
     * @param relatesTo {String} Contains relatable object Id's of type of Competitions or Contests
     * @param relatesToExternal {String} Are meant to record extra information about the object that can be the original transaction Id or extra tagging information
     * @param metadata {module:model/EventMetadata} 
     */
    constructor(id, spaceName, created, memberId, action, entityId, sourceValue, points, transactionTimestamp, relatesTo, relatesToExternal, metadata) { 
        ModelDefault.initialize(this, id, spaceName, created);EventAllOf.initialize(this, memberId, action, entityId, sourceValue, points, transactionTimestamp, relatesTo, relatesToExternal, metadata);
        Event.initialize(this, id, spaceName, created, memberId, action, entityId, sourceValue, points, transactionTimestamp, relatesTo, relatesToExternal, metadata);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['id'] = null;
        obj['spaceName'] = null;
        obj['created'] = null;
        obj['memberId'] = null;
        obj['action'] = null;
        obj['batchId'] = null;
        obj['entityId'] = null;
        obj['sourceValue'] = null;
        obj['points'] = null;
        obj['transactionTimestamp'] = null;
        obj['relatesTo'] = null;
        obj['relatesToExternal'] = null;
        obj['metadata'] = new EventMetadata().model();

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['id'] = { "type": 'String' };
        obj["fields"]['spaceName'] = { "type": 'String' };
        obj["fields"]['created'] = { "type": 'Date' };
        obj["fields"]['memberId'] = { "type": 'String' };
        obj["fields"]['action'] = { "type": 'String' };
        obj["fields"]['batchId'] = { "type": 'String' };
        obj["fields"]['entityId'] = { "type": 'String' };
        obj["fields"]['sourceValue'] = { "type": 'Number' };
        obj["fields"]['points'] = { "type": 'Number' };
        obj["fields"]['transactionTimestamp'] = { "type": 'Date' };
        obj["fields"]['relatesTo'] = { "type": 'String' };
        obj["fields"]['relatesToExternal'] = { "type": 'String' };
        obj["fields"]['metadata'] = new EventMetadata().modelMap();

        
        obj["requiredFields"]['id'] = { "type": 'String' };
        obj["requiredFields"]['spaceName'] = { "type": 'String' };
        obj["requiredFields"]['created'] = { "type": 'Date' };
        obj["requiredFields"]['memberId'] = { "type": 'String' };
        obj["requiredFields"]['action'] = { "type": 'String' };
        obj["requiredFields"]['entityId'] = { "type": 'String' };
        obj["requiredFields"]['sourceValue'] = { "type": 'Number' };
        obj["requiredFields"]['points'] = { "type": 'Number' };
        obj["requiredFields"]['transactionTimestamp'] = { "type": 'Date' };
        obj["requiredFields"]['relatesTo'] = { "type": 'String' };
        obj["requiredFields"]['relatesToExternal'] = { "type": 'String' };
        obj["requiredFields"]['metadata'] = new EventMetadata().modelMap();

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, spaceName, created, memberId, action, entityId, sourceValue, points, transactionTimestamp, relatesTo, relatesToExternal, metadata) { 
        obj['id'] = id;
        obj['spaceName'] = spaceName;
        obj['created'] = created;
        obj['memberId'] = memberId;
        obj['action'] = action;
        obj['entityId'] = entityId;
        obj['sourceValue'] = sourceValue;
        obj['points'] = points;
        obj['transactionTimestamp'] = transactionTimestamp;
        obj['relatesTo'] = relatesTo;
        obj['relatesToExternal'] = relatesToExternal;
        obj['metadata'] = metadata;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();
            ModelDefault.constructFromObject(data, obj);
            EventAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('memberId')) {
                obj['memberId'] = ApiClient.convertToType(data['memberId'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('sourceValue')) {
                obj['sourceValue'] = ApiClient.convertToType(data['sourceValue'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Number');
            }
            if (data.hasOwnProperty('transactionTimestamp')) {
                obj['transactionTimestamp'] = ApiClient.convertToType(data['transactionTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('relatesTo')) {
                obj['relatesTo'] = ApiClient.convertToType(data['relatesTo'], 'String');
            }
            if (data.hasOwnProperty('relatesToExternal')) {
                obj['relatesToExternal'] = ApiClient.convertToType(data['relatesToExternal'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = EventMetadata.constructFromObject(data['metadata']);
            }
        }
        return obj;
    }


}

/**
 * A unique system generated identifier
 * @member {String} id
 */
Event.prototype['id'] = undefined;

/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
Event.prototype['spaceName'] = undefined;

/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
Event.prototype['created'] = undefined;

/**
 * Unique system identifier of a Member
 * @member {String} memberId
 */
Event.prototype['memberId'] = undefined;

/**
 * The identifier that describes the meaning of this event
 * @member {String} action
 */
Event.prototype['action'] = undefined;

/**
 * The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event
 * @member {String} batchId
 */
Event.prototype['batchId'] = undefined;

/**
 * It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
 * @member {String} entityId
 */
Event.prototype['entityId'] = undefined;

/**
 * The actual numerical value related to the event
 * @member {Number} sourceValue
 */
Event.prototype['sourceValue'] = undefined;

/**
 * A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
 * @member {Number} points
 */
Event.prototype['points'] = undefined;

/**
 * ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
 * @member {Date} transactionTimestamp
 */
Event.prototype['transactionTimestamp'] = undefined;

/**
 * Contains relatable object Id's of type of Competitions or Contests
 * @member {String} relatesTo
 */
Event.prototype['relatesTo'] = undefined;

/**
 * Are meant to record extra information about the object that can be the original transaction Id or extra tagging information
 * @member {String} relatesToExternal
 */
Event.prototype['relatesToExternal'] = undefined;

/**
 * @member {module:model/EventMetadata} metadata
 */
Event.prototype['metadata'] = undefined;


// Implement ModelDefault interface:
/**
 * A unique system generated identifier
 * @member {String} id
 */
ModelDefault.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
ModelDefault.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
ModelDefault.prototype['created'] = undefined;
// Implement EventAllOf interface:
/**
 * Unique system identifier of a Member
 * @member {String} memberId
 */
EventAllOf.prototype['memberId'] = undefined;
/**
 * The identifier that describes the meaning of this event
 * @member {String} action
 */
EventAllOf.prototype['action'] = undefined;
/**
 * The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event
 * @member {String} batchId
 */
EventAllOf.prototype['batchId'] = undefined;
/**
 * It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
 * @member {String} entityId
 */
EventAllOf.prototype['entityId'] = undefined;
/**
 * The actual numerical value related to the event
 * @member {Number} sourceValue
 */
EventAllOf.prototype['sourceValue'] = undefined;
/**
 * A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
 * @member {Number} points
 */
EventAllOf.prototype['points'] = undefined;
/**
 * ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
 * @member {Date} transactionTimestamp
 */
EventAllOf.prototype['transactionTimestamp'] = undefined;
/**
 * Contains relatable object Id's of type of Competitions or Contests
 * @member {String} relatesTo
 */
EventAllOf.prototype['relatesTo'] = undefined;
/**
 * Are meant to record extra information about the object that can be the original transaction Id or extra tagging information
 * @member {String} relatesToExternal
 */
EventAllOf.prototype['relatesToExternal'] = undefined;
/**
 * @member {module:model/EventMetadata} metadata
 */
EventAllOf.prototype['metadata'] = undefined;




export default Event;

