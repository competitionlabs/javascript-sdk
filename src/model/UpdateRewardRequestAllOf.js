/**
 * CompetitionLabs Application Services
 * The services listed below are referred as CompetitionLabs Application Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@competitionlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import Translation from './Translation';

/**
 * The UpdateRewardRequestAllOf model module.
 * @module model/UpdateRewardRequestAllOf
 * @version 1.0.0
 */
class UpdateRewardRequestAllOf {
    /**
     * Constructs a new <code>UpdateRewardRequestAllOf</code>.
     * @alias module:model/UpdateRewardRequestAllOf
     */
    constructor() { 
        
        UpdateRewardRequestAllOf.initialize(this);
    }

    /**
    * Constructs a full object with all available fields.
    */
    model(){
        var obj = {};

        obj['rewardRank'] = null;
        obj['rewardName'] = null;
        obj['value'] = null;
        obj['rewardTypeId'] = null;
        obj['description'] = null;
        obj['delay'] = null;
        obj['isMemberAcknowledgmentRequired'] = null;
        obj['metadata'] = [new Metadata().model()];
        obj['pointInTime'] = null;
        obj['period'] = null;
        obj['translations'] = [new Translation().model()];
        obj['constraints'] = [null];

        return obj;
    }

    /**
    * Constructs a full object Map for all available fields.
    */
    modelMap(){
        var obj = {
            "fields": {},
            "requiredFields": {}
        };

        obj["fields"]['rewardRank'] = { "type": 'String' };
        obj["fields"]['rewardName'] = { "type": 'String' };
        obj["fields"]['value'] = { "type": 'Number' };
        obj["fields"]['rewardTypeId'] = { "type": 'String' };
        obj["fields"]['description'] = { "type": 'String' };
        obj["fields"]['delay'] = { "type": 'Number' };
        obj["fields"]['isMemberAcknowledgmentRequired'] = { "type": 'Boolean' };
        obj["fields"]['metadata'] = [new Metadata().modelMap()];
        obj["fields"]['pointInTime'] = { "type": 'Date' };
        obj["fields"]['period'] = { "type": 'Number' };
        obj["fields"]['translations'] = [new Translation().modelMap()];
        obj["fields"]['constraints'] = [{ "type": 'String' }];

        

        return obj;
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateRewardRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateRewardRequestAllOf} obj Optional instance to populate.
     * @return {module:model/UpdateRewardRequestAllOf} The populated <code>UpdateRewardRequestAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateRewardRequestAllOf();

            if (data.hasOwnProperty('rewardRank')) {
                obj['rewardRank'] = ApiClient.convertToType(data['rewardRank'], 'String');
            }
            if (data.hasOwnProperty('rewardName')) {
                obj['rewardName'] = ApiClient.convertToType(data['rewardName'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('rewardTypeId')) {
                obj['rewardTypeId'] = ApiClient.convertToType(data['rewardTypeId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('delay')) {
                obj['delay'] = ApiClient.convertToType(data['delay'], 'Number');
            }
            if (data.hasOwnProperty('isMemberAcknowledgmentRequired')) {
                obj['isMemberAcknowledgmentRequired'] = ApiClient.convertToType(data['isMemberAcknowledgmentRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('pointInTime')) {
                obj['pointInTime'] = ApiClient.convertToType(data['pointInTime'], 'Date');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [Translation]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * If used in the context of contest this will associate with the rank of the leaderboard
 * @member {String} rewardRank
 */
UpdateRewardRequestAllOf.prototype['rewardRank'] = undefined;

/**
 * The name of a reward
 * @member {String} rewardName
 */
UpdateRewardRequestAllOf.prototype['rewardName'] = undefined;

/**
 * Numerical value of the reward that will be issued based on the reward type
 * @member {Number} value
 */
UpdateRewardRequestAllOf.prototype['value'] = undefined;

/**
 * A unique id of the Reward Type
 * @member {String} rewardTypeId
 */
UpdateRewardRequestAllOf.prototype['rewardTypeId'] = undefined;

/**
 * The description of a Reward
 * @member {String} description
 */
UpdateRewardRequestAllOf.prototype['description'] = undefined;

/**
 * Delay of issuing a reward in minutes
 * @member {Number} delay
 * @default 0
 */
UpdateRewardRequestAllOf.prototype['delay'] = 0;

/**
 * Requires member acknowledgment to claim a reward. If set to True reward will not be automatically issued
 * @member {Boolean} isMemberAcknowledgmentRequired
 * @default false
 */
UpdateRewardRequestAllOf.prototype['isMemberAcknowledgmentRequired'] = false;

/**
 * @member {Array.<module:model/Metadata>} metadata
 */
UpdateRewardRequestAllOf.prototype['metadata'] = undefined;

/**
 * ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone
 * @member {Date} pointInTime
 */
UpdateRewardRequestAllOf.prototype['pointInTime'] = undefined;

/**
 * Reward available for a period of time from issuing in minutes
 * @member {Number} period
 * @default 0
 */
UpdateRewardRequestAllOf.prototype['period'] = 0;

/**
 * @member {Array.<module:model/Translation>} translations
 */
UpdateRewardRequestAllOf.prototype['translations'] = undefined;

/**
 * Additional constraints
 * @member {Array.<String>} constraints
 */
UpdateRewardRequestAllOf.prototype['constraints'] = undefined;






export default UpdateRewardRequestAllOf;

